import * as cdk from "aws-cdk-lib";
import * as aws_dynamodb from "aws-cdk-lib/aws-dynamodb";
import { AttributeType, BillingMode } from "aws-cdk-lib/aws-dynamodb";
export const DynamoDBTableProps = {
    RoutesDbTable: {
        Name: "RoutesDB",
        PartitionKeyName: "pairTradeTypeChainId",
        SortKeyName: "routeId",
    },
    RoutesDbCachingRequestFlagTable: {
        Name: "RoutesDbCacheReqFlagDB",
        PartitionKeyName: "pairTradeTypeChainId",
        SortKeyName: "amount",
    },
    CacheRouteDynamoDbTable: {
        Name: "RouteCachingDB",
        PartitionKeyName: "pairTradeTypeChainId",
        SortKeyName: "protocolsBucketBlockNumber",
    },
    CachingRequestFlagDynamoDbTable: {
        Name: "CacheReqFlagDB",
        PartitionKeyName: "pairTradeTypeChainId",
        SortKeyName: "protocolsBucketBlockNumber",
    },
    V3PoolsDynamoDbTable: {
        Name: "V3PoolsCachingDB",
        PartitionKeyName: "poolAddress",
        SortKeyName: "blockNumber",
    },
    TokenPropertiesCachingDbTable: {
        Name: "TokenPropertiesCachingDb",
        PartitionKeyName: "chainIdTokenAddress",
    },
    TTLAttributeName: "ttl",
};
export class RoutingDatabaseStack extends cdk.NestedStack {
    constructor(scope, name, props) {
        super(scope, name, props);
        // Creates a DynamoDB Table for storing the routes
        this.routesDynamoDb = new aws_dynamodb.Table(this, DynamoDBTableProps.RoutesDbTable.Name, {
            tableName: DynamoDBTableProps.RoutesDbTable.Name,
            partitionKey: { name: DynamoDBTableProps.RoutesDbTable.PartitionKeyName, type: AttributeType.STRING },
            sortKey: { name: DynamoDBTableProps.RoutesDbTable.SortKeyName, type: AttributeType.NUMBER },
            billingMode: BillingMode.PAY_PER_REQUEST,
            timeToLiveAttribute: DynamoDBTableProps.TTLAttributeName,
        });
        // Creates a DynamoDB Table for storing the buckets that are flagging as already cached in the RoutesDb
        this.routesDbCachingRequestFlagDynamoDb = new aws_dynamodb.Table(this, DynamoDBTableProps.RoutesDbCachingRequestFlagTable.Name, {
            tableName: DynamoDBTableProps.RoutesDbCachingRequestFlagTable.Name,
            partitionKey: {
                name: DynamoDBTableProps.RoutesDbCachingRequestFlagTable.PartitionKeyName,
                type: AttributeType.STRING,
            },
            sortKey: { name: DynamoDBTableProps.RoutesDbCachingRequestFlagTable.SortKeyName, type: AttributeType.NUMBER },
            billingMode: BillingMode.PAY_PER_REQUEST,
            timeToLiveAttribute: DynamoDBTableProps.TTLAttributeName,
        });
        // Creates a DynamoDB Table for storing the cached routes
        this.cachedRoutesDynamoDb = new aws_dynamodb.Table(this, DynamoDBTableProps.CacheRouteDynamoDbTable.Name, {
            tableName: DynamoDBTableProps.CacheRouteDynamoDbTable.Name,
            partitionKey: { name: DynamoDBTableProps.CacheRouteDynamoDbTable.PartitionKeyName, type: AttributeType.STRING },
            sortKey: { name: DynamoDBTableProps.CacheRouteDynamoDbTable.SortKeyName, type: AttributeType.STRING },
            billingMode: BillingMode.PAY_PER_REQUEST,
            timeToLiveAttribute: DynamoDBTableProps.TTLAttributeName,
        });
        // Creates a DynamoDB Table for storing the buckets that are flagging as already cached in the CachedRoutesDb
        this.cachingRequestFlagDynamoDb = new aws_dynamodb.Table(this, DynamoDBTableProps.CachingRequestFlagDynamoDbTable.Name, {
            tableName: DynamoDBTableProps.CachingRequestFlagDynamoDbTable.Name,
            partitionKey: {
                name: DynamoDBTableProps.CachingRequestFlagDynamoDbTable.PartitionKeyName,
                type: AttributeType.STRING,
            },
            sortKey: { name: DynamoDBTableProps.CachingRequestFlagDynamoDbTable.SortKeyName, type: AttributeType.STRING },
            billingMode: BillingMode.PAY_PER_REQUEST,
            timeToLiveAttribute: DynamoDBTableProps.TTLAttributeName,
        });
        // Creates a DynamoDB Table for storing the cached v3 pools
        this.cachedV3PoolsDynamoDb = new aws_dynamodb.Table(this, DynamoDBTableProps.V3PoolsDynamoDbTable.Name, {
            tableName: DynamoDBTableProps.V3PoolsDynamoDbTable.Name,
            partitionKey: { name: DynamoDBTableProps.V3PoolsDynamoDbTable.PartitionKeyName, type: AttributeType.STRING },
            sortKey: { name: DynamoDBTableProps.V3PoolsDynamoDbTable.SortKeyName, type: AttributeType.NUMBER },
            billingMode: BillingMode.PAY_PER_REQUEST,
            timeToLiveAttribute: DynamoDBTableProps.TTLAttributeName,
        });
        // Creates a TokenValidationResult Table for storing the FOT/SFT tokens
        this.tokenPropertiesCachingDynamoDb = new aws_dynamodb.Table(this, DynamoDBTableProps.TokenPropertiesCachingDbTable.Name, {
            tableName: DynamoDBTableProps.TokenPropertiesCachingDbTable.Name,
            partitionKey: {
                name: DynamoDBTableProps.TokenPropertiesCachingDbTable.PartitionKeyName,
                type: AttributeType.STRING,
            },
            billingMode: BillingMode.PAY_PER_REQUEST,
            timeToLiveAttribute: DynamoDBTableProps.TTLAttributeName,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,