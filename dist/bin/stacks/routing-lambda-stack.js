import * as cdk from "aws-cdk-lib";
import { Duration, Size } from "aws-cdk-lib";
import * as asg from "aws-cdk-lib/aws-applicationautoscaling";
import * as aws_cloudwatch from "aws-cdk-lib/aws-cloudwatch";
import * as aws_cloudwatch_actions from "aws-cdk-lib/aws-cloudwatch-actions";
import * as aws_iam from "aws-cdk-lib/aws-iam";
import * as aws_lambda from "aws-cdk-lib/aws-lambda";
import * as aws_lambda_nodejs from "aws-cdk-lib/aws-lambda-nodejs";
import * as aws_sns from "aws-cdk-lib/aws-sns";
import * as path from "path";
import { DynamoDBTableProps } from "./routing-database-stack";
import { RetentionDays } from "aws-cdk-lib/aws-logs";
export class RoutingLambdaStack extends cdk.NestedStack {
    constructor(scope, name, props) {
        super(scope, name, props);
        const { poolCacheBucket, poolCacheBucket2, poolCacheKey, jsonRpcProviders, tokenListCacheBucket, provisionedConcurrency, ethGasStationInfoUrl, chatbotSNSArn, tenderlyUser, tenderlyProject, tenderlyAccessKey, routesDynamoDb, routesDbCachingRequestFlagDynamoDb, cachedRoutesDynamoDb, cachingRequestFlagDynamoDb, cachedV3PoolsDynamoDb, tokenPropertiesCachingDynamoDb, unicornSecret, } = props;
        const lambdaRole = new aws_iam.Role(this, "RoutingLambdaRole", {
            assumedBy: new aws_iam.ServicePrincipal("lambda.amazonaws.com"),
            managedPolicies: [
                aws_iam.ManagedPolicy.fromAwsManagedPolicyName("service-role/AWSLambdaBasicExecutionRole"),
                aws_iam.ManagedPolicy.fromAwsManagedPolicyName("service-role/AWSLambdaRole"),
                aws_iam.ManagedPolicy.fromAwsManagedPolicyName("CloudWatchLambdaInsightsExecutionRolePolicy"),
                aws_iam.ManagedPolicy.fromAwsManagedPolicyName("AWSXRayDaemonWriteAccess"),
            ],
        });
        poolCacheBucket.grantRead(lambdaRole);
        poolCacheBucket2.grantRead(lambdaRole);
        tokenListCacheBucket.grantRead(lambdaRole);
        routesDynamoDb.grantReadWriteData(lambdaRole);
        routesDbCachingRequestFlagDynamoDb.grantReadWriteData(lambdaRole);
        cachedRoutesDynamoDb.grantReadWriteData(lambdaRole);
        cachingRequestFlagDynamoDb.grantReadWriteData(lambdaRole);
        cachedV3PoolsDynamoDb.grantReadWriteData(lambdaRole);
        tokenPropertiesCachingDynamoDb.grantReadWriteData(lambdaRole);
        const region = cdk.Stack.of(this).region;
        this.routingLambda = new aws_lambda_nodejs.NodejsFunction(this, "RoutingLambda2", {
            role: lambdaRole,
            runtime: aws_lambda.Runtime.NODEJS_LATEST,
            entry: path.join(__dirname, "../../lib/handlers/index.ts"),
            handler: "quoteHandler",
            // 11/8/23: URA currently calls the Routing API with a timeout of 10 seconds.
            // Set this lambda's timeout to be slightly lower to give them time to
            // log the response in the event of a failure on our end.
            timeout: cdk.Duration.seconds(9),
            memorySize: 1792,
            ephemeralStorageSize: Size.gibibytes(1),
            deadLetterQueueEnabled: true,
            bundling: {
                minify: true,
                sourceMap: true,
            },
            awsSdkConnectionReuse: true,
            description: "Routing Lambda",
            environment: {
                VERSION: "6",
                NODE_OPTIONS: "--enable-source-maps",
                POOL_CACHE_BUCKET: poolCacheBucket.bucketName,
                POOL_CACHE_BUCKET_2: poolCacheBucket2.bucketName,
                POOL_CACHE_KEY: poolCacheKey,
                TOKEN_LIST_CACHE_BUCKET: tokenListCacheBucket.bucketName,
                ETH_GAS_STATION_INFO_URL: ethGasStationInfoUrl,
                TENDERLY_USER: tenderlyUser,
                TENDERLY_PROJECT: tenderlyProject,
                TENDERLY_ACCESS_KEY: tenderlyAccessKey,
                // WARNING: Dynamo table name should be the tableinstance.name, e.g. routesDynamoDb.tableName.
                //          But we tried and had seen lambd version error:
                //          The following resource(s) failed to create: [RoutingLambda2CurrentVersion49A1BB948389ce4f9c26b15e2ccb07b4c1bab726].
                //          2023-09-01 10:22:43 UTC-0700RoutingLambda2CurrentVersion49A1BB948389ce4f9c26b15e2ccb07b4c1bab726CREATE_FAILED
                //          A version for this Lambda function exists ( 261 ). Modify the function to create a new version.
                //          Hence we do not want to modify the table name below.
                ROUTES_TABLE_NAME: DynamoDBTableProps.RoutesDbTable.Name,
                ROUTES_CACHING_REQUEST_FLAG_TABLE_NAME: DynamoDBTableProps.RoutesDbCachingRequestFlagTable.Name,
                CACHED_ROUTES_TABLE_NAME: DynamoDBTableProps.CacheRouteDynamoDbTable.Name,
                CACHING_REQUEST_FLAG_TABLE_NAME: DynamoDBTableProps.CachingRequestFlagDynamoDbTable.Name,
                CACHED_V3_POOLS_TABLE_NAME: DynamoDBTableProps.V3PoolsDynamoDbTable.Name,
                // tokenPropertiesCachingDynamoDb.tableName is the correct format.
                // we will start using the correct ones going forward
                TOKEN_PROPERTIES_CACHING_TABLE_NAME: tokenPropertiesCachingDynamoDb.tableName,
                UNICORN_SECRET: unicornSecret,
                ...jsonRpcProviders,
            },
            layers: [
                aws_lambda.LayerVersion.fromLayerVersionArn(this, "InsightsLayer", `arn:aws:lambda:${region}:580247275435:layer:LambdaInsightsExtension:14`),
            ],
            tracing: aws_lambda.Tracing.ACTIVE,
            logRetention: RetentionDays.TWO_WEEKS,
        });
        const lambdaAlarmErrorRate = new aws_cloudwatch.Alarm(this, "RoutingAPI-LambdaErrorRate", {
            metric: new aws_cloudwatch.MathExpression({
                expression: "errors / invocations",
                usingMetrics: {
                    errors: this.routingLambda.metricErrors({
                        period: Duration.minutes(5),
                        statistic: "avg",
                    }),
                    invocations: this.routingLambda.metricInvocations({
                        period: Duration.minutes(5),
                        statistic: "avg",
                    }),
                },
            }),
            threshold: 0.05,
            evaluationPeriods: 3,
        });
        const lambdaThrottlesErrorRate = new aws_cloudwatch.Alarm(this, "RoutingAPI-LambdaThrottles", {
            metric: this.routingLambda.metricThrottles({
                period: Duration.minutes(5),
                statistic: "sum",
            }),
            threshold: 10,
            evaluationPeriods: 3,
        });
        if (chatbotSNSArn) {
            const chatBotTopic = aws_sns.Topic.fromTopicArn(this, "ChatbotTopic", chatbotSNSArn);
            lambdaAlarmErrorRate.addAlarmAction(new aws_cloudwatch_actions.SnsAction(chatBotTopic));
            lambdaThrottlesErrorRate.addAlarmAction(new aws_cloudwatch_actions.SnsAction(chatBotTopic));
        }
        const enableProvisionedConcurrency = provisionedConcurrency > 0;
        this.routingLambdaAlias = new aws_lambda.Alias(this, "RoutingLiveAlias", {
            aliasName: "live",
            version: this.routingLambda.currentVersion,
            provisionedConcurrentExecutions: enableProvisionedConcurrency ? provisionedConcurrency : undefined,
        });
        if (enableProvisionedConcurrency) {
            const target = new asg.ScalableTarget(this, "RoutingProvConcASG", {
                serviceNamespace: asg.ServiceNamespace.LAMBDA,
                maxCapacity: provisionedConcurrency * 5,
                minCapacity: provisionedConcurrency,
                resourceId: `function:${this.routingLambdaAlias.lambda.functionName}:${this.routingLambdaAlias.aliasName}`,
                scalableDimension: "lambda:function:ProvisionedConcurrency",
            });
            target.node.addDependency(this.routingLambdaAlias);
            target.scaleToTrackMetric("RoutingProvConcTracking", {
                targetValue: 0.8,
                predefinedMetric: asg.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION,
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGluZy1sYW1iZGEtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9iaW4vc3RhY2tzL3JvdXRpbmctbGFtYmRhLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxHQUFHLE1BQU0sYUFBYSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRTdDLE9BQU8sS0FBSyxHQUFHLE1BQU0sd0NBQXdDLENBQUM7QUFDOUQsT0FBTyxLQUFLLGNBQWMsTUFBTSw0QkFBNEIsQ0FBQztBQUM3RCxPQUFPLEtBQUssc0JBQXNCLE1BQU0sb0NBQW9DLENBQUM7QUFDN0UsT0FBTyxLQUFLLE9BQU8sTUFBTSxxQkFBcUIsQ0FBQztBQUMvQyxPQUFPLEtBQUssVUFBVSxNQUFNLHdCQUF3QixDQUFDO0FBQ3JELE9BQU8sS0FBSyxpQkFBaUIsTUFBTSwrQkFBK0IsQ0FBQztBQUVuRSxPQUFPLEtBQUssT0FBTyxNQUFNLHFCQUFxQixDQUFDO0FBRS9DLE9BQU8sS0FBSyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQzdCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQXNCckQsTUFBTSxPQUFPLGtCQUFtQixTQUFRLEdBQUcsQ0FBQyxXQUFXO0lBSXJELFlBQVksS0FBZ0IsRUFBRSxJQUFZLEVBQUUsS0FBOEI7UUFDeEUsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDMUIsTUFBTSxFQUNKLGVBQWUsRUFDZixnQkFBZ0IsRUFDaEIsWUFBWSxFQUNaLGdCQUFnQixFQUNoQixvQkFBb0IsRUFDcEIsc0JBQXNCLEVBQ3RCLG9CQUFvQixFQUNwQixhQUFhLEVBQ2IsWUFBWSxFQUNaLGVBQWUsRUFDZixpQkFBaUIsRUFDakIs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Q25HLENBQUMsQ0FBQztRQUVILElBQUksNEJBQTRCLEVBQUU7WUFDaEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRTtnQkFDaEUsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLGdCQUFnQixDQUFDLE1BQU07Z0JBQzdDLFdBQVcsRUFBRSxzQkFBc0IsR0FBRyxDQUFDO2dCQUN2QyxXQUFXLEVBQUUsc0JBQXNCO2dCQUNuQyxVQUFVLEVBQUUsWUFBWSxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFO2dCQUMxRyxpQkFBaUIsRUFBRSx3Q0FBd0M7YUFDNUQsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFFbkQsTUFBTSxDQUFDLGtCQUFrQixDQUFDLHlCQUF5QixFQUFFO2dCQUNuRCxXQUFXLEVBQUUsR0FBRztnQkFDaEIsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLGdCQUFnQixDQUFDLDBDQUEwQzthQUNsRixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCB7IER1cmF0aW9uLCBTaXplIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQgKiBhcyBhd3NfZHluYW1vZGIgZnJvbSBcImF3cy1jZGstbGliL2F3cy1keW5hbW9kYlwiO1xuaW1wb3J0ICogYXMgYXNnIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtYXBwbGljYXRpb25hdXRvc2NhbGluZ1wiO1xuaW1wb3J0ICogYXMgYXdzX2Nsb3Vkd2F0Y2ggZnJvbSBcImF3cy1jZGstbGliL2F3cy1jbG91ZHdhdGNoXCI7XG5pbXBvcnQgKiBhcyBhd3NfY2xvdWR3YXRjaF9hY3Rpb25zIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtY2xvdWR3YXRjaC1hY3Rpb25zXCI7XG5pbXBvcnQgKiBhcyBhd3NfaWFtIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtaWFtXCI7XG5pbXBvcnQgKiBhcyBhd3NfbGFtYmRhIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtbGFtYmRhXCI7XG5pbXBvcnQgKiBhcyBhd3NfbGFtYmRhX25vZGVqcyBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWxhbWJkYS1ub2RlanNcIjtcbmltcG9ydCAqIGFzIGF3c19zMyBmcm9tIFwiYXdzLWNkay1saWIvYXdzLXMzXCI7XG5pbXBvcnQgKiBhcyBhd3Nfc25zIGZyb20gXCJhd3MtY2RrLWxpYi9hd3Mtc25zXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgRHluYW1vREJUYWJsZVByb3BzIH0gZnJvbSBcIi4vcm91dGluZy1kYXRhYmFzZS1zdGFja1wiO1xuaW1wb3J0IHsgUmV0ZW50aW9uRGF5cyB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtbG9nc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRpbmdMYW1iZGFTdGFja1Byb3BzIGV4dGVuZHMgY2RrLk5lc3RlZFN0YWNrUHJvcHMge1xuICBwb29sQ2FjaGVCdWNrZXQ6IGF3c19zMy5CdWNrZXQ7XG4gIHBvb2xDYWNoZUJ1Y2tldDI6IGF3c19zMy5CdWNrZXQ7XG4gIHBvb2xDYWNoZUtleTogc3RyaW5nO1xuICBqc29uUnBjUHJvdmlkZXJzOiB7IFtjaGFpbk5hbWU6IHN0cmluZ106IHN0cmluZyB9O1xuICB0b2tlbkxpc3RDYWNoZUJ1Y2tldDogYXdzX3MzLkJ1Y2tldDtcbiAgcHJvdmlzaW9uZWRDb25jdXJyZW5jeTogbnVtYmVyO1xuICBldGhHYXNTdGF0aW9uSW5mb1VybDogc3RyaW5nO1xuICB0ZW5kZXJseVVzZXI6IHN0cmluZztcbiAgdGVuZGVybHlQcm9qZWN0OiBzdHJpbmc7XG4gIHRlbmRlcmx5QWNjZXNzS2V5OiBzdHJpbmc7XG4gIGNoYXRib3RTTlNBcm4/OiBzdHJpbmc7XG4gIHJvdXRlc0R5bmFtb0RiOiBhd3NfZHluYW1vZGIuVGFibGU7XG4gIHJvdXRlc0RiQ2FjaGluZ1JlcXVlc3RGbGFnRHluYW1vRGI6IGF3c19keW5hbW9kYi5UYWJsZTtcbiAgY2FjaGVkUm91dGVzRHluYW1vRGI6IGF3c19keW5hbW9kYi5UYWJsZTtcbiAgY2FjaGluZ1JlcXVlc3RGbGFnRHluYW1vRGI6IGF3c19keW5hbW9kYi5UYWJsZTtcbiAgY2FjaGVkVjNQb29sc0R5bmFtb0RiOiBhd3NfZHluYW1vZGIuVGFibGU7XG4gIHRva2VuUHJvcGVydGllc0NhY2hpbmdEeW5hbW9EYjogYXdzX2R5bmFtb2RiLlRhYmxlO1xuICB1bmljb3JuU2VjcmV0OiBzdHJpbmc7XG59XG5leHBvcnQgY2xhc3MgUm91dGluZ0xhbWJkYVN0YWNrIGV4dGVuZHMgY2RrLk5lc3RlZFN0YWNrIHtcbiAgcHVibGljIHJlYWRvbmx5IHJvdXRpbmdMYW1iZGE6IGF3c19sYW1iZGFfbm9kZWpzLk5vZGVqc0Z1bmN0aW9uO1xuICBwdWJsaWMgcmVhZG9ubHkgcm91dGluZ0xhbWJkYUFsaWFzOiBhd3NfbGFtYmRhLkFsaWFzO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIG5hbWU6IHN0cmluZywgcHJvcHM6IFJvdXRpbmdMYW1iZGFTdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIG5hbWUsIHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBwb29sQ2FjaGVCdWNrZXQsXG4gICAgICBwb29sQ2FjaGVCdWNrZXQyLFxuICAgICAgcG9vbENhY2hlS2V5LFxuICAgICAganNvblJwY1Byb3ZpZGVycyxcbiAgICAgIHRva2VuTGlzdENhY2hlQnVja2V0LFxuICAgICAgcHJvdmlzaW9uZWRDb25jdXJyZW5jeSxcbiAgICAgIGV0aEdhc1N0YXRpb25JbmZvVXJsLFxuICAgICAgY2hhdGJvdFNOU0FybixcbiAgICAgIHRlbmRlcmx5VXNlcixcbiAgICAgIHRlbmRlcmx5UHJvamVjdCxcbiAgICAgIHRlbmRlcmx5QWNjZXNzS2V5LFxuICAgICAgcm91dGVzRHluYW1vRGIsXG4gICAgICByb3V0ZXNEYkNhY2hpbmdSZXF1ZXN0RmxhZ0R5bmFtb0RiLFxuICAgICAgY2FjaGVkUm91dGVzRHluYW1vRGIsXG4gICAgICBjYWNoaW5nUmVxdWVzdEZsYWdEeW5hbW9EYixcbiAgICAgIGNhY2hlZFYzUG9vbHNEeW5hbW9EYixcbiAgICAgIHRva2VuUHJvcGVydGllc0NhY2hpbmdEeW5hbW9EYixcbiAgICAgIHVuaWNvcm5TZWNyZXQsXG4gICAgfSA9IHByb3BzO1xuXG4gICAgY29uc3QgbGFtYmRhUm9sZSA9IG5ldyBhd3NfaWFtLlJvbGUodGhpcywgXCJSb3V0aW5nTGFtYmRhUm9sZVwiLCB7XG4gICAgICBhc3N1bWVkQnk6IG5ldyBhd3NfaWFtLlNlcnZpY2VQcmluY2lwYWwoXCJsYW1iZGEuYW1hem9uYXdzLmNvbVwiKSxcbiAgICAgIG1hbmFnZWRQb2xpY2llczogW1xuICAgICAgICBhd3NfaWFtLk1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKFwic2VydmljZS1yb2xlL0FXU0xhbWJkYUJhc2ljRXhlY3V0aW9uUm9sZVwiKSxcbiAgICAgICAgYXdzX2lhbS5NYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZShcInNlcnZpY2Utcm9sZS9BV1NMYW1iZGFSb2xlXCIpLFxuICAgICAgICBhd3NfaWFtLk1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKFwiQ2xvdWRXYXRjaExhbWJkYUluc2lnaHRzRXhlY3V0aW9uUm9sZVBvbGljeVwiKSxcbiAgICAgICAgYXdzX2lhbS5NYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZShcIkFXU1hSYXlEYWVtb25Xcml0ZUFjY2Vzc1wiKSxcbiAgICAgIF0sXG4gICAgfSk7XG4gICAgcG9vbENhY2hlQnVja2V0LmdyYW50UmVhZChsYW1iZGFSb2xlKTtcbiAgICBwb29sQ2FjaGVCdWNrZXQyLmdyYW50UmVhZChsYW1iZGFSb2xlKTtcbiAgICB0b2tlbkxpc3RDYWNoZUJ1Y2tldC5ncmFudFJlYWQobGFtYmRhUm9sZSk7XG4gICAgcm91dGVzRHluYW1vRGIuZ3JhbnRSZWFkV3JpdGVEYXRhKGxhbWJkYVJvbGUpO1xuICAgIHJvdXRlc0RiQ2FjaGluZ1JlcXVlc3RGbGFnRHluYW1vRGIuZ3JhbnRSZWFkV3JpdGVEYXRhKGxhbWJkYVJvbGUpO1xuICAgIGNhY2hlZFJvdXRlc0R5bmFtb0RiLmdyYW50UmVhZFdyaXRlRGF0YShsYW1iZGFSb2xlKTtcbiAgICBjYWNoaW5nUmVxdWVzdEZsYWdEeW5hbW9EYi5ncmFudFJlYWRXcml0ZURhdGEobGFtYmRhUm9sZSk7XG4gICAgY2FjaGVkVjNQb29sc0R5bmFtb0RiLmdyYW50UmVhZFdyaXRlRGF0YShsYW1iZGFSb2xlKTtcblxuICAgIHRva2VuUHJvcGVydGllc0NhY2hpbmdEeW5hbW9EYi5ncmFudFJlYWRXcml0ZURhdGEobGFtYmRhUm9sZSk7XG5cbiAgICBjb25zdCByZWdpb24gPSBjZGsuU3RhY2sub2YodGhpcykucmVnaW9uO1xuXG4gICAgdGhpcy5yb3V0aW5nTGFtYmRhID0gbmV3IGF3c19sYW1iZGFfbm9kZWpzLk5vZGVqc0Z1bmN0aW9uKHRoaXMsIFwiUm91dGluZ0xhbWJkYTJcIiwge1xuICAgICAgcm9sZTogbGFtYmRhUm9sZSxcbiAgICAgIHJ1bnRpbWU6IGF3c19sYW1iZGEuUnVudGltZS5OT0RFSlNfTEFURVNULFxuICAgICAgZW50cnk6IHBhdGguam9pbihfX2Rpcm5hbWUsIFwiLi4vLi4vbGliL2hhbmRsZXJzL2luZGV4LnRzXCIpLFxuICAgICAgaGFuZGxlcjogXCJxdW90ZUhhbmRsZXJcIixcbiAgICAgIC8vIDExLzgvMjM6IFVSQSBjdXJyZW50bHkgY2FsbHMgdGhlIFJvdXRpbmcgQVBJIHdpdGggYSB0aW1lb3V0IG9mIDEwIHNlY29uZHMuXG4gICAgICAvLyBTZXQgdGhpcyBsYW1iZGEncyB0aW1lb3V0IHRvIGJlIHNsaWdodGx5IGxvd2VyIHRvIGdpdmUgdGhlbSB0aW1lIHRvXG4gICAgICAvLyBsb2cgdGhlIHJlc3BvbnNlIGluIHRoZSBldmVudCBvZiBhIGZhaWx1cmUgb24gb3VyIGVuZC5cbiAgICAgIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDkpLFxuICAgICAgbWVtb3J5U2l6ZTogMTc5MixcbiAgICAgIGVwaGVtZXJhbFN0b3JhZ2VTaXplOiBTaXplLmdpYmlieXRlcygxKSxcbiAgICAgIGRlYWRMZXR0ZXJRdWV1ZUVuYWJsZWQ6IHRydWUsXG4gICAgICBidW5kbGluZzoge1xuICAgICAgICBtaW5pZnk6IHRydWUsXG4gICAgICAgIHNvdXJjZU1hcDogdHJ1ZSxcbiAgICAgIH0sXG5cbiAgICAgIGF3c1Nka0Nvbm5lY3Rpb25SZXVzZTogdHJ1ZSxcblxuICAgICAgZGVzY3JpcHRpb246IFwiUm91dGluZyBMYW1iZGFcIixcbiAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIFZFUlNJT046IFwiNlwiLFxuICAgICAgICBOT0RFX09QVElPTlM6IFwiLS1lbmFibGUtc291cmNlLW1hcHNcIixcbiAgICAgICAgUE9PTF9DQUNIRV9CVUNLRVQ6IHBvb2xDYWNoZUJ1Y2tldC5idWNrZXROYW1lLFxuICAgICAgICBQT09MX0NBQ0hFX0JVQ0tFVF8yOiBwb29sQ2FjaGVCdWNrZXQyLmJ1Y2tldE5hbWUsXG4gICAgICAgIFBPT0xfQ0FDSEVfS0VZOiBwb29sQ2FjaGVLZXksXG4gICAgICAgIFRPS0VOX0xJU1RfQ0FDSEVfQlVDS0VUOiB0b2tlbkxpc3RDYWNoZUJ1Y2tldC5idWNrZXROYW1lLFxuICAgICAgICBFVEhfR0FTX1NUQVRJT05fSU5GT19VUkw6IGV0aEdhc1N0YXRpb25JbmZvVXJsLFxuICAgICAgICBURU5ERVJMWV9VU0VSOiB0ZW5kZXJseVVzZXIsXG4gICAgICAgIFRFTkRFUkxZX1BST0pFQ1Q6IHRlbmRlcmx5UHJvamVjdCxcbiAgICAgICAgVEVOREVSTFlfQUNDRVNTX0tFWTogdGVuZGVybHlBY2Nlc3NLZXksXG4gICAgICAgIC8vIFdBUk5JTkc6IER5bmFtbyB0YWJsZSBuYW1lIHNob3VsZCBiZSB0aGUgdGFibGVpbnN0YW5jZS5uYW1lLCBlLmcuIHJvdXRlc0R5bmFtb0RiLnRhYmxlTmFtZS5cbiAgICAgICAgLy8gICAgICAgICAgQnV0IHdlIHRyaWVkIGFuZCBoYWQgc2VlbiBsYW1iZCB2ZXJzaW9uIGVycm9yOlxuICAgICAgICAvLyAgICAgICAgICBUaGUgZm9sbG93aW5nIHJlc291cmNlKHMpIGZhaWxlZCB0byBjcmVhdGU6IFtSb3V0aW5nTGFtYmRhMkN1cnJlbnRWZXJzaW9uNDlBMUJCOTQ4Mzg5Y2U0ZjljMjZiMTVlMmNjYjA3YjRjMWJhYjcyNl0uXG4gICAgICAgIC8vICAgICAgICAgIDIwMjMtMDktMDEgMTA6MjI6NDMgVVRDLTA3MDBSb3V0aW5nTGFtYmRhMkN1cnJlbnRWZXJzaW9uNDlBMUJCOTQ4Mzg5Y2U0ZjljMjZiMTVlMmNjYjA3YjRjMWJhYjcyNkNSRUFURV9GQUlMRURcbiAgICAgICAgLy8gICAgICAgICAgQSB2ZXJzaW9uIGZvciB0aGlzIExhbWJkYSBmdW5jdGlvbiBleGlzdHMgKCAyNjEgKS4gTW9kaWZ5IHRoZSBmdW5jdGlvbiB0byBjcmVhdGUgYSBuZXcgdmVyc2lvbi5cbiAgICAgICAgLy8gICAgICAgICAgSGVuY2Ugd2UgZG8gbm90IHdhbnQgdG8gbW9kaWZ5IHRoZSB0YWJsZSBuYW1lIGJlbG93LlxuICAgICAgICBST1VURVNfVEFCTEVfTkFNRTogRHluYW1vREJUYWJsZVByb3BzLlJvdXRlc0RiVGFibGUuTmFtZSxcbiAgICAgICAgUk9VVEVTX0NBQ0hJTkdfUkVRVUVTVF9GTEFHX1RBQkxFX05BTUU6IER5bmFtb0RCVGFibGVQcm9wcy5Sb3V0ZXNEYkNhY2hpbmdSZXF1ZXN0RmxhZ1RhYmxlLk5hbWUsXG4gICAgICAgIENBQ0hFRF9ST1VURVNfVEFCTEVfTkFNRTogRHluYW1vREJUYWJsZVByb3BzLkNhY2hlUm91dGVEeW5hbW9EYlRhYmxlLk5hbWUsXG4gICAgICAgIENBQ0hJTkdfUkVRVUVTVF9GTEFHX1RBQkxFX05BTUU6IER5bmFtb0RCVGFibGVQcm9wcy5DYWNoaW5nUmVxdWVzdEZsYWdEeW5hbW9EYlRhYmxlLk5hbWUsXG4gICAgICAgIENBQ0hFRF9WM19QT09MU19UQUJMRV9OQU1FOiBEeW5hbW9EQlRhYmxlUHJvcHMuVjNQb29sc0R5bmFtb0RiVGFibGUuTmFtZSxcblxuICAgICAgICAvLyB0b2tlblByb3BlcnRpZXNDYWNoaW5nRHluYW1vRGIudGFibGVOYW1lIGlzIHRoZSBjb3JyZWN0IGZvcm1hdC5cbiAgICAgICAgLy8gd2Ugd2lsbCBzdGFydCB1c2luZyB0aGUgY29ycmVjdCBvbmVzIGdvaW5nIGZvcndhcmRcbiAgICAgICAgVE9LRU5fUFJPUEVSVElFU19DQUNISU5HX1RBQkxFX05BTUU6IHRva2VuUHJvcGVydGllc0NhY2hpbmdEeW5hbW9EYi50YWJsZU5hbWUsXG4gICAgICAgIFVOSUNPUk5fU0VDUkVUOiB1bmljb3JuU2VjcmV0LFxuICAgICAgICAuLi5qc29uUnBjUHJvdmlkZXJzLFxuICAgICAgfSxcbiAgICAgIGxheWVyczogW1xuICAgICAgICBhd3NfbGFtYmRhLkxheWVyVmVyc2lvbi5mcm9tTGF5ZXJWZXJzaW9uQXJuKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgXCJJbnNpZ2h0c0xheWVyXCIsXG4gICAgICAgICAgYGFybjphd3M6bGFtYmRhOiR7cmVnaW9ufTo1ODAyNDcyNzU0MzU6bGF5ZXI6TGFtYmRhSW5zaWdodHNFeHRlbnNpb246MTRgXG4gICAgICAgICksXG4gICAgICBdLFxuICAgICAgdHJhY2luZzogYXdzX2xhbWJkYS5UcmFjaW5nLkFDVElWRSxcbiAgICAgIGxvZ1JldGVudGlvbjogUmV0ZW50aW9uRGF5cy5UV09fV0VFS1MsXG4gICAgfSk7XG5cbiAgICBjb25zdCBsYW1iZGFBbGFybUVycm9yUmF0ZSA9IG5ldyBhd3NfY2xvdWR3YXRjaC5BbGFybSh0aGlzLCBcIlJvdXRpbmdBUEktTGFtYmRhRXJyb3JSYXRlXCIsIHtcbiAgICAgIG1ldHJpYzogbmV3IGF3c19jbG91ZHdhdGNoLk1hdGhFeHByZXNzaW9uKHtcbiAgICAgICAgZXhwcmVzc2lvbjogXCJlcnJvcnMgLyBpbnZvY2F0aW9uc1wiLFxuICAgICAgICB1c2luZ01ldHJpY3M6IHtcbiAgICAgICAgICBlcnJvcnM6IHRoaXMucm91dGluZ0xhbWJkYS5tZXRyaWNFcnJvcnMoe1xuICAgICAgICAgICAgcGVyaW9kOiBEdXJhdGlvbi5taW51dGVzKDUpLFxuICAgICAgICAgICAgc3RhdGlzdGljOiBcImF2Z1wiLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGludm9jYXRpb25zOiB0aGlzLnJvdXRpbmdMYW1iZGEubWV0cmljSW52b2NhdGlvbnMoe1xuICAgICAgICAgICAgcGVyaW9kOiBEdXJhdGlvbi5taW51dGVzKDUpLFxuICAgICAgICAgICAgc3RhdGlzdGljOiBcImF2Z1wiLFxuICAgICAgICAgIH0pLFxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgICB0aHJlc2hvbGQ6IDAuMDUsXG4gICAgICBldmFsdWF0aW9uUGVyaW9kczogMyxcbiAgICB9KTtcblxuICAgIGNvbnN0IGxhbWJkYVRocm90dGxlc0Vycm9yUmF0ZSA9IG5ldyBhd3NfY2xvdWR3YXRjaC5BbGFybSh0aGlzLCBcIlJvdXRpbmdBUEktTGFtYmRhVGhyb3R0bGVzXCIsIHtcbiAgICAgIG1ldHJpYzogdGhpcy5yb3V0aW5nTGFtYmRhLm1ldHJpY1Rocm90dGxlcyh7XG4gICAgICAgIHBlcmlvZDogRHVyYXRpb24ubWludXRlcyg1KSxcbiAgICAgICAgc3RhdGlzdGljOiBcInN1bVwiLFxuICAgICAgfSksXG4gICAgICB0aHJlc2hvbGQ6IDEwLFxuICAgICAgZXZhbHVhdGlvblBlcmlvZHM6IDMsXG4gICAgfSk7XG5cbiAgICBpZiAoY2hhdGJvdFNOU0Fybikge1xuICAgICAgY29uc3QgY2hhdEJvdFRvcGljID0gYXdzX3Nucy5Ub3BpYy5mcm9tVG9waWNBcm4odGhpcywgXCJDaGF0Ym90VG9waWNcIiwgY2hhdGJvdFNOU0Fybik7XG5cbiAgICAgIGxhbWJkYUFsYXJtRXJyb3JSYXRlLmFkZEFsYXJtQWN0aW9uKG5ldyBhd3NfY2xvdWR3YXRjaF9hY3Rpb25zLlNuc0FjdGlvbihjaGF0Qm90VG9waWMpKTtcblxuICAgICAgbGFtYmRhVGhyb3R0bGVzRXJyb3JSYXRlLmFkZEFsYXJtQWN0aW9uKG5ldyBhd3NfY2xvdWR3YXRjaF9hY3Rpb25zLlNuc0FjdGlvbihjaGF0Qm90VG9waWMpKTtcbiAgICB9XG5cbiAgICBjb25zdCBlbmFibGVQcm92aXNpb25lZENvbmN1cnJlbmN5ID0gcHJvdmlzaW9uZWRDb25jdXJyZW5jeSA+IDA7XG5cbiAgICB0aGlzLnJvdXRpbmdMYW1iZGFBbGlhcyA9IG5ldyBhd3NfbGFtYmRhLkFsaWFzKHRoaXMsIFwiUm91dGluZ0xpdmVBbGlhc1wiLCB7XG4gICAgICBhbGlhc05hbWU6IFwibGl2ZVwiLFxuICAgICAgdmVyc2lvbjogdGhpcy5yb3V0aW5nTGFtYmRhLmN1cnJlbnRWZXJzaW9uLFxuICAgICAgcHJvdmlzaW9uZWRDb25jdXJyZW50RXhlY3V0aW9uczogZW5hYmxlUHJvdmlzaW9uZWRDb25jdXJyZW5jeSA/IHByb3Zpc2lvbmVkQ29uY3VycmVuY3kgOiB1bmRlZmluZWQsXG4gICAgfSk7XG5cbiAgICBpZiAoZW5hYmxlUHJvdmlzaW9uZWRDb25jdXJyZW5jeSkge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gbmV3IGFzZy5TY2FsYWJsZVRhcmdldCh0aGlzLCBcIlJvdXRpbmdQcm92Q29uY0FTR1wiLCB7XG4gICAgICAgIHNlcnZpY2VOYW1lc3BhY2U6IGFzZy5TZXJ2aWNlTmFtZXNwYWNlLkxBTUJEQSxcbiAgICAgICAgbWF4Q2FwYWNpdHk6IHByb3Zpc2lvbmVkQ29uY3VycmVuY3kgKiA1LFxuICAgICAgICBtaW5DYXBhY2l0eTogcHJvdmlzaW9uZWRDb25jdXJyZW5jeSxcbiAgICAgICAgcmVzb3VyY2VJZDogYGZ1bmN0aW9uOiR7dGhpcy5yb3V0aW5nTGFtYmRhQWxpYXMubGFtYmRhLmZ1bmN0aW9uTmFtZX06JHt0aGlzLnJvdXRpbmdMYW1iZGFBbGlhcy5hbGlhc05hbWV9YCxcbiAgICAgICAgc2NhbGFibGVEaW1lbnNpb246IFwibGFtYmRhOmZ1bmN0aW9uOlByb3Zpc2lvbmVkQ29uY3VycmVuY3lcIixcbiAgICAgIH0pO1xuXG4gICAgICB0YXJnZXQubm9kZS5hZGREZXBlbmRlbmN5KHRoaXMucm91dGluZ0xhbWJkYUFsaWFzKTtcblxuICAgICAgdGFyZ2V0LnNjYWxlVG9UcmFja01ldHJpYyhcIlJvdXRpbmdQcm92Q29uY1RyYWNraW5nXCIsIHtcbiAgICAgICAgdGFyZ2V0VmFsdWU6IDAuOCxcbiAgICAgICAgcHJlZGVmaW5lZE1ldHJpYzogYXNnLlByZWRlZmluZWRNZXRyaWMuTEFNQkRBX1BST1ZJU0lPTkVEX0NPTkNVUlJFTkNZX1VUSUxJWkFUSU9OLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=