import * as cdk from "aws-cdk-lib";
import { Stage } from "aws-cdk-lib";
import dotenv from "dotenv";
import "source-map-support/register";
import { STAGE } from "../lib/util/stage";
import { RoutingAPIStack } from "./stacks/routing-api-stack";
dotenv.config();
export class RoutingAPIStage extends Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        const { jsonRpcProviders, provisionedConcurrency, ethGasStationInfoUrl, chatbotSNSArn, stage, internalApiKey, route53Arn, pinata_key, pinata_secret, hosted_zone, tenderlyUser, tenderlyProject, tenderlyAccessKey, unicornSecret, } = props;
        const { url } = new RoutingAPIStack(this, "RoutingAPI", {
            jsonRpcProviders,
            provisionedConcurrency,
            ethGasStationInfoUrl,
            chatbotSNSArn,
            stage,
            internalApiKey,
            route53Arn,
            pinata_key,
            pinata_secret,
            hosted_zone,
            tenderlyUser,
            tenderlyProject,
            tenderlyAccessKey,
            unicornSecret,
        });
        this.url = url;
    }
}
const app = new cdk.App();
const jsonRpcProviders = {
    WEB3_RPC_8453: process.env.JSON_RPC_PROVIDER_8453,
};
// Local dev stack
new RoutingAPIStack(app, "RoutingAPIStack", {
    jsonRpcProviders,
    provisionedConcurrency: process.env.PROVISION_CONCURRENCY ? parseInt(process.env.PROVISION_CONCURRENCY) : 0,
    throttlingOverride: process.env.THROTTLE_PER_FIVE_MINS,
    ethGasStationInfoUrl: process.env.ETH_GAS_STATION_INFO_URL,
    chatbotSNSArn: process.env.CHATBOT_SNS_ARN,
    stage: STAGE.LOCAL,
    internalApiKey: "test-api-key",
    route53Arn: process.env.ROLE_ARN,
    pinata_key: process.env.PINATA_API_KEY,
    pinata_secret: process.env.PINATA_API_SECRET,
    hosted_zone: process.env.HOSTED_ZONE,
    tenderlyUser: process.env.TENDERLY_USER,
    tenderlyProject: process.env.TENDERLY_PROJECT,
    tenderlyAccessKey: process.env.TENDERLY_ACCESS_KEY,
    unicornSecret: process.env.UNICORN_SECRET,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vYmluL2FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssR0FBRyxNQUFNLGFBQWEsQ0FBQztBQUNuQyxPQUFPLEVBQWEsS0FBSyxFQUFjLE1BQU0sYUFBYSxDQUFDO0FBRzNELE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLDZCQUE2QixDQUFDO0FBRXJDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRWhCLE1BQU0sT0FBTyxlQUFnQixTQUFRLEtBQUs7SUFHeEMsWUFDRSxLQUFnQixFQUNoQixFQUFVLEVBQ1YsS0FlQztRQUVELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFDSixnQkFBZ0IsRUFDaEIsc0JBQXNCLEVBQ3RCLG9CQUFvQixFQUNwQixhQUFhLEVBQ2IsS0FBSyxFQUNMLGNBQWMsRUFDZCxVQUFVLEVBQ1YsVUFBVSxFQUNWLGFBQWEsRUFDYixXQUFXLEVBQ1gsWUFBWSxFQUNaLGVBQWUsRUFDZixpQkFBaUIsRUFDakIsYUFBYSxHQUNkLEdBQUcsS0FBSyxDQUFDO1FBRVYsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksZUFBZSxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUU7WUFDdEQsZ0JBQWdCO1lBQ2hCLHNCQUFzQjtZQUN0QixvQkFBb0I7WUFDcEIsYUFBYTtZQUNiLEtBQUs7WUFDTCxjQUFjO1lBQ2QsVUFBVTtZQUNWLFVBQVU7WUFDVixhQUFhO1lBQ2IsV0FBVztZQUNYLFlBQVk7WUFDWixlQUFlO1lBQ2YsaUJBQWlCO1lBQ2pCLGFBQWE7U0FDZCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNqQixDQUFDO0NBQ0Y7QUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixNQUFNLGdCQUFnQixHQUFHO0lBQ3ZCLGFBQWEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUF1QjtDQUNuRCxDQUFDO0FBRUYsa0JBQWtCO0FBQ2xCLElBQUksZUFBZSxDQUFDLEdBQUcsRUFBRSxpQkFBaUIsRUFBRTtJQUMxQyxnQkFBZ0I7SUFDaEIsc0JBQXNCLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzRyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQjtJQUN0RCxvQkFBb0IsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF5QjtJQUMzRCxhQUFhLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlO0lBQzFDLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztJQUNsQixjQUFjLEVBQUUsY0FBYztJQUM5QixVQUFVLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRO0lBQ2hDLFVBQVUsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWU7SUFDdkMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWtCO0lBQzdDLFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVk7SUFDckMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYztJQUN4QyxlQUFlLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBaUI7SUFDOUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBb0I7SUFDbkQsYUFBYSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBZTtDQUMzQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQgeyBDZm5PdXRwdXQsIFN0YWdlLCBTdGFnZVByb3BzIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5cbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgZG90ZW52IGZyb20gXCJkb3RlbnZcIjtcbmltcG9ydCBcInNvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3RlclwiO1xuXG5pbXBvcnQgeyBTVEFHRSB9IGZyb20gXCIuLi9saWIvdXRpbC9zdGFnZVwiO1xuaW1wb3J0IHsgUm91dGluZ0FQSVN0YWNrIH0gZnJvbSBcIi4vc3RhY2tzL3JvdXRpbmctYXBpLXN0YWNrXCI7XG5kb3RlbnYuY29uZmlnKCk7XG5cbmV4cG9ydCBjbGFzcyBSb3V0aW5nQVBJU3RhZ2UgZXh0ZW5kcyBTdGFnZSB7XG4gIHB1YmxpYyByZWFkb25seSB1cmw6IENmbk91dHB1dDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgcHJvcHM6IFN0YWdlUHJvcHMgJiB7XG4gICAgICBqc29uUnBjUHJvdmlkZXJzOiB7IFtjaGFpbk5hbWU6IHN0cmluZ106IHN0cmluZyB9O1xuICAgICAgcHJvdmlzaW9uZWRDb25jdXJyZW5jeTogbnVtYmVyO1xuICAgICAgZXRoR2FzU3RhdGlvbkluZm9Vcmw6IHN0cmluZztcbiAgICAgIGNoYXRib3RTTlNBcm4/OiBzdHJpbmc7XG4gICAgICBzdGFnZTogc3RyaW5nO1xuICAgICAgaW50ZXJuYWxBcGlLZXk/OiBzdHJpbmc7XG4gICAgICByb3V0ZTUzQXJuPzogc3RyaW5nO1xuICAgICAgcGluYXRhX2tleT86IHN0cmluZztcbiAgICAgIHBpbmF0YV9zZWNyZXQ/OiBzdHJpbmc7XG4gICAgICBob3N0ZWRfem9uZT86IHN0cmluZztcbiAgICAgIHRlbmRlcmx5VXNlcjogc3RyaW5nO1xuICAgICAgdGVuZGVybHlQcm9qZWN0OiBzdHJpbmc7XG4gICAgICB0ZW5kZXJseUFjY2Vzc0tleTogc3RyaW5nO1xuICAgICAgdW5pY29yblNlY3JldDogc3RyaW5nO1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAganNvblJwY1Byb3ZpZGVycyxcbiAgICAgIHByb3Zpc2lvbmVkQ29uY3VycmVuY3ksXG4gICAgICBldGhHYXNTdGF0aW9uSW5mb1VybCxcbiAgICAgIGNoYXRib3RTTlNBcm4sXG4gICAgICBzdGFnZSxcbiAgICAgIGludGVybmFsQXBpS2V5LFxuICAgICAgcm91dGU1M0FybixcbiAgICAgIHBpbmF0YV9rZXksXG4gICAgICBwaW5hdGFfc2VjcmV0LFxuICAgICAgaG9zdGVkX3pvbmUsXG4gICAgICB0ZW5kZXJseVVzZXIsXG4gICAgICB0ZW5kZXJseVByb2plY3QsXG4gICAgICB0ZW5kZXJseUFjY2Vzc0tleSxcbiAgICAgIHVuaWNvcm5TZWNyZXQsXG4gICAgfSA9IHByb3BzO1xuXG4gICAgY29uc3QgeyB1cmwgfSA9IG5ldyBSb3V0aW5nQVBJU3RhY2sodGhpcywgXCJSb3V0aW5nQVBJXCIsIHtcbiAgICAgIGpzb25ScGNQcm92aWRlcnMsXG4gICAgICBwcm92aXNpb25lZENvbmN1cnJlbmN5LFxuICAgICAgZXRoR2FzU3RhdGlvbkluZm9VcmwsXG4gICAgICBjaGF0Ym90U05TQXJuLFxuICAgICAgc3RhZ2UsXG4gICAgICBpbnRlcm5hbEFwaUtleSxcbiAgICAgIHJvdXRlNTNBcm4sXG4gICAgICBwaW5hdGFfa2V5LFxuICAgICAgcGluYXRhX3NlY3JldCxcbiAgICAgIGhvc3RlZF96b25lLFxuICAgICAgdGVuZGVybHlVc2VyLFxuICAgICAgdGVuZGVybHlQcm9qZWN0LFxuICAgICAgdGVuZGVybHlBY2Nlc3NLZXksXG4gICAgICB1bmljb3JuU2VjcmV0LFxuICAgIH0pO1xuICAgIHRoaXMudXJsID0gdXJsO1xuICB9XG59XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbmNvbnN0IGpzb25ScGNQcm92aWRlcnMgPSB7XG4gIFdFQjNfUlBDXzg0NTM6IHByb2Nlc3MuZW52LkpTT05fUlBDX1BST1ZJREVSXzg0NTMhLFxufTtcblxuLy8gTG9jYWwgZGV2IHN0YWNrXG5uZXcgUm91dGluZ0FQSVN0YWNrKGFwcCwgXCJSb3V0aW5nQVBJU3RhY2tcIiwge1xuICBqc29uUnBjUHJvdmlkZXJzLFxuICBwcm92aXNpb25lZENvbmN1cnJlbmN5OiBwcm9jZXNzLmVudi5QUk9WSVNJT05fQ09OQ1VSUkVOQ1kgPyBwYXJzZUludChwcm9jZXNzLmVudi5QUk9WSVNJT05fQ09OQ1VSUkVOQ1kpIDogMCxcbiAgdGhyb3R0bGluZ092ZXJyaWRlOiBwcm9jZXNzLmVudi5USFJPVFRMRV9QRVJfRklWRV9NSU5TLFxuICBldGhHYXNTdGF0aW9uSW5mb1VybDogcHJvY2Vzcy5lbnYuRVRIX0dBU19TVEFUSU9OX0lORk9fVVJMISxcbiAgY2hhdGJvdFNOU0FybjogcHJvY2Vzcy5lbnYuQ0hBVEJPVF9TTlNfQVJOLFxuICBzdGFnZTogU1RBR0UuTE9DQUwsXG4gIGludGVybmFsQXBpS2V5OiBcInRlc3QtYXBpLWtleVwiLFxuICByb3V0ZTUzQXJuOiBwcm9jZXNzLmVudi5ST0xFX0FSTixcbiAgcGluYXRhX2tleTogcHJvY2Vzcy5lbnYuUElOQVRBX0FQSV9LRVkhLFxuICBwaW5hdGFfc2VjcmV0OiBwcm9jZXNzLmVudi5QSU5BVEFfQVBJX1NFQ1JFVCEsXG4gIGhvc3RlZF96b25lOiBwcm9jZXNzLmVudi5IT1NURURfWk9ORSEsXG4gIHRlbmRlcmx5VXNlcjogcHJvY2Vzcy5lbnYuVEVOREVSTFlfVVNFUiEsXG4gIHRlbmRlcmx5UHJvamVjdDogcHJvY2Vzcy5lbnYuVEVOREVSTFlfUFJPSkVDVCEsXG4gIHRlbmRlcmx5QWNjZXNzS2V5OiBwcm9jZXNzLmVudi5URU5ERVJMWV9BQ0NFU1NfS0VZISxcbiAgdW5pY29yblNlY3JldDogcHJvY2Vzcy5lbnYuVU5JQ09STl9TRUNSRVQhLFxufSk7XG4iXX0=