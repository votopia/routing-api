import { Protocol } from "@votopia/sdk-core";
import { log, metric, MetricLoggerUnit } from "@votopia/smart-order-router";
export const getDistribution = (distributionPercent) => {
    const percents = new Array();
    for (let i = 1; i <= 100 / distributionPercent; i++) {
        percents.push(i * distributionPercent);
    }
    return percents;
};
export const measureDistributionPercentChangeImpact = (distributionPercentBefore, distributionPercentAfter, bestSwapRoute, currencyIn, currencyOut, tradeType, amount) => {
    const routesImpacted = new Array();
    const percentDistributionBefore = getDistribution(distributionPercentBefore);
    const percentDistributionAfter = getDistribution(distributionPercentAfter);
    bestSwapRoute.route.forEach((route) => {
        switch (route.protocol) {
            case Protocol.V3:
                if (percentDistributionBefore.includes(route.percent) && !percentDistributionAfter.includes(route.percent)) {
                    routesImpacted.push(route.toString());
                }
                break;
        }
    });
    if (routesImpacted.length > 0) {
        log.warn(`Distribution percent change impacted the routes ${routesImpacted.join(",")},
      for currency ${currencyIn.wrapped.symbol}
      amount ${amount.toExact()}
      quote currency ${currencyOut.wrapped.symbol}
      trade type ${tradeType}
      `);
        metric.putMetric("BEST_SWAP_ROUTE_DISTRIBUTION_PERCENT_CHANGE_IMPACTED", 1, MetricLoggerUnit.Count);
        metric.putMetric("ROUTES_WITH_VALID_QUOTE_DISTRIBUTION_PERCENT_CHANGE_IMPACTED", routesImpacted.length, MetricLoggerUnit.Count);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxwaGEtY29uZmlnLW1lYXN1cmVtZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3V0aWwvYWxwaGEtY29uZmlnLW1lYXN1cmVtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBNEIsUUFBUSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdkUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQWEsTUFBTSw2QkFBNkIsQ0FBQztBQUV2RixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxtQkFBMkIsRUFBRSxFQUFFO0lBQzdELE1BQU0sUUFBUSxHQUFrQixJQUFJLEtBQUssRUFBVSxDQUFDO0lBRXBELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxHQUFHLEdBQUcsbUJBQW1CLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDbkQsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsbUJBQW1CLENBQUMsQ0FBQztLQUN4QztJQUVELE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHNDQUFzQyxHQUFHLENBQ3BELHlCQUFpQyxFQUNqQyx3QkFBZ0MsRUFDaEMsYUFBd0IsRUFDeEIsVUFBb0IsRUFDcEIsV0FBcUIsRUFDckIsU0FBaUIsRUFFakIsTUFBZ0MsRUFDaEMsRUFBRTtJQUNGLE1BQU0sY0FBYyxHQUFrQixJQUFJLEtBQUssRUFBVSxDQUFDO0lBRTFELE1BQU0seUJBQXlCLEdBQUcsZUFBZSxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDN0UsTUFBTSx3QkFBd0IsR0FBRyxlQUFlLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUUzRSxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1FBQ3BDLFFBQVEsS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUN0QixLQUFLLFFBQVEsQ0FBQyxFQUFFO2dCQUNkLElBQUkseUJBQXlCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQzFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7aUJBQ3ZDO2dCQUNELE1BQU07U0FDVDtJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUM3QixHQUFHLENBQUMsSUFBSSxDQUFDLG1EQUFtRCxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztxQkFDbkUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNO2VBQy9CLE1BQU0sQ0FBQyxPQUFPLEVBQUU7dUJBQ1IsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNO21CQUM5QixTQUFTO09BQ3JCLENBQUMsQ0FBQztRQUNMLE1BQU0sQ0FBQyxTQUFTLENBQUMsc0RBQXNELEVBQUUsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BHLE1BQU0sQ0FBQyxTQUFTLENBQ2QsOERBQThELEVBQzlELGNBQWMsQ0FBQyxNQUFNLEVBQ3JCLGdCQUFnQixDQUFDLEtBQUssQ0FDdkIsQ0FBQztLQUNIO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3VycmVuY3ksIEN1cnJlbmN5QW1vdW50LCBQcm90b2NvbCB9IGZyb20gXCJAdm90b3BpYS9zZGstY29yZVwiO1xuaW1wb3J0IHsgbG9nLCBtZXRyaWMsIE1ldHJpY0xvZ2dlclVuaXQsIFN3YXBSb3V0ZSB9IGZyb20gXCJAdm90b3BpYS9zbWFydC1vcmRlci1yb3V0ZXJcIjtcblxuZXhwb3J0IGNvbnN0IGdldERpc3RyaWJ1dGlvbiA9IChkaXN0cmlidXRpb25QZXJjZW50OiBudW1iZXIpID0+IHtcbiAgY29uc3QgcGVyY2VudHM6IEFycmF5PG51bWJlcj4gPSBuZXcgQXJyYXk8bnVtYmVyPigpO1xuXG4gIGZvciAobGV0IGkgPSAxOyBpIDw9IDEwMCAvIGRpc3RyaWJ1dGlvblBlcmNlbnQ7IGkrKykge1xuICAgIHBlcmNlbnRzLnB1c2goaSAqIGRpc3RyaWJ1dGlvblBlcmNlbnQpO1xuICB9XG5cbiAgcmV0dXJuIHBlcmNlbnRzO1xufTtcblxuZXhwb3J0IGNvbnN0IG1lYXN1cmVEaXN0cmlidXRpb25QZXJjZW50Q2hhbmdlSW1wYWN0ID0gKFxuICBkaXN0cmlidXRpb25QZXJjZW50QmVmb3JlOiBudW1iZXIsXG4gIGRpc3RyaWJ1dGlvblBlcmNlbnRBZnRlcjogbnVtYmVyLFxuICBiZXN0U3dhcFJvdXRlOiBTd2FwUm91dGUsXG4gIGN1cnJlbmN5SW46IEN1cnJlbmN5LFxuICBjdXJyZW5jeU91dDogQ3VycmVuY3ksXG4gIHRyYWRlVHlwZTogc3RyaW5nLFxuXG4gIGFtb3VudDogQ3VycmVuY3lBbW91bnQ8Q3VycmVuY3k+XG4pID0+IHtcbiAgY29uc3Qgcm91dGVzSW1wYWN0ZWQ6IEFycmF5PHN0cmluZz4gPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xuXG4gIGNvbnN0IHBlcmNlbnREaXN0cmlidXRpb25CZWZvcmUgPSBnZXREaXN0cmlidXRpb24oZGlzdHJpYnV0aW9uUGVyY2VudEJlZm9yZSk7XG4gIGNvbnN0IHBlcmNlbnREaXN0cmlidXRpb25BZnRlciA9IGdldERpc3RyaWJ1dGlvbihkaXN0cmlidXRpb25QZXJjZW50QWZ0ZXIpO1xuXG4gIGJlc3RTd2FwUm91dGUucm91dGUuZm9yRWFjaCgocm91dGUpID0+IHtcbiAgICBzd2l0Y2ggKHJvdXRlLnByb3RvY29sKSB7XG4gICAgICBjYXNlIFByb3RvY29sLlYzOlxuICAgICAgICBpZiAocGVyY2VudERpc3RyaWJ1dGlvbkJlZm9yZS5pbmNsdWRlcyhyb3V0ZS5wZXJjZW50KSAmJiAhcGVyY2VudERpc3RyaWJ1dGlvbkFmdGVyLmluY2x1ZGVzKHJvdXRlLnBlcmNlbnQpKSB7XG4gICAgICAgICAgcm91dGVzSW1wYWN0ZWQucHVzaChyb3V0ZS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChyb3V0ZXNJbXBhY3RlZC5sZW5ndGggPiAwKSB7XG4gICAgbG9nLndhcm4oYERpc3RyaWJ1dGlvbiBwZXJjZW50IGNoYW5nZSBpbXBhY3RlZCB0aGUgcm91dGVzICR7cm91dGVzSW1wYWN0ZWQuam9pbihcIixcIil9LFxuICAgICAgZm9yIGN1cnJlbmN5ICR7Y3VycmVuY3lJbi53cmFwcGVkLnN5bWJvbH1cbiAgICAgIGFtb3VudCAke2Ftb3VudC50b0V4YWN0KCl9XG4gICAgICBxdW90ZSBjdXJyZW5jeSAke2N1cnJlbmN5T3V0LndyYXBwZWQuc3ltYm9sfVxuICAgICAgdHJhZGUgdHlwZSAke3RyYWRlVHlwZX1cbiAgICAgIGApO1xuICAgIG1ldHJpYy5wdXRNZXRyaWMoXCJCRVNUX1NXQVBfUk9VVEVfRElTVFJJQlVUSU9OX1BFUkNFTlRfQ0hBTkdFX0lNUEFDVEVEXCIsIDEsIE1ldHJpY0xvZ2dlclVuaXQuQ291bnQpO1xuICAgIG1ldHJpYy5wdXRNZXRyaWMoXG4gICAgICBcIlJPVVRFU19XSVRIX1ZBTElEX1FVT1RFX0RJU1RSSUJVVElPTl9QRVJDRU5UX0NIQU5HRV9JTVBBQ1RFRFwiLFxuICAgICAgcm91dGVzSW1wYWN0ZWQubGVuZ3RoLFxuICAgICAgTWV0cmljTG9nZ2VyVW5pdC5Db3VudFxuICAgICk7XG4gIH1cbn07XG4iXX0=