import { DynamoCachingV3Pool } from "./cache-dynamo-pool";
export class DynamoDBCachingV3PoolProvider {
    constructor(poolProvider, tableName) {
        this.poolProvider = poolProvider;
        this.POOL_CACHE_KEY = (address) => `pool-${address}`;
        this.dynamoCache = new DynamoCachingV3Pool({ tableName, ttlMinutes: 1 });
    }
    getPoolAddress(tokenA, tokenB, feeAmount) {
        return this.poolProvider.getPoolAddress(tokenA, tokenB, feeAmount);
    }
    async getPools(tokenPairs, providerConfig) {
        const poolAddressSet = new Set();
        const poolsToGetTokenPairs = [];
        const poolsToGetAddresses = [];
        const poolAddressToPool = {};
        const blockNumber = await (providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber);
        for (const [tokenA, tokenB, feeAmount] of tokenPairs) {
            const { poolAddress, token0, token1 } = this.getPoolAddress(tokenA, tokenB, feeAmount);
            if (poolAddressSet.has(poolAddress)) {
                continue;
            }
            poolAddressSet.add(poolAddress);
            const partitionKey = this.POOL_CACHE_KEY(poolAddress);
            const cachedPool = await this.dynamoCache.get(partitionKey, blockNumber);
            if (cachedPool) {
                poolAddressToPool[poolAddress] = cachedPool;
                continue;
            }
            poolsToGetTokenPairs.push([token0, token1, feeAmount]);
            poolsToGetAddresses.push(poolAddress);
        }
        if (poolsToGetAddresses.length > 0) {
            const poolAccessor = await this.poolProvider.getPools(poolsToGetTokenPairs, providerConfig);
            for (const address of poolsToGetAddresses) {
                const pool = poolAccessor.getPoolByAddress(address);
                if (pool) {
                    poolAddressToPool[address] = pool;
                    const partitionKey = this.POOL_CACHE_KEY(address);
                    await this.dynamoCache.set(pool, partitionKey, blockNumber);
                }
            }
        }
        return {
            getPool: (tokenA, tokenB, feeAmount) => {
                const { poolAddress } = this.getPoolAddress(tokenA, tokenB, feeAmount);
                return poolAddressToPool[poolAddress];
            },
            getPoolByAddress: (address) => poolAddressToPool[address],
            getAllPools: () => Object.values(poolAddressToPool),
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1vLWNhY2hpbmctcG9vbC1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYi9oYW5kbGVycy9wb29scy9wb29sLWNhY2hpbmcvdjMvZHluYW1vLWNhY2hpbmctcG9vbC1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUxRCxNQUFNLE9BQU8sNkJBQTZCO0lBSXhDLFlBQXNCLFlBQTZCLEVBQUUsU0FBaUI7UUFBaEQsaUJBQVksR0FBWixZQUFZLENBQWlCO1FBRmxDLG1CQUFjLEdBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBRSxDQUFDLFFBQVEsT0FBTyxFQUFFLENBQUM7UUFHdkUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLG1CQUFtQixDQUFDLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFTSxjQUFjLENBQ25CLE1BQWEsRUFDYixNQUFhLEVBQ2IsU0FBb0I7UUFNcEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFTSxLQUFLLENBQUMsUUFBUSxDQUNuQixVQUF1QyxFQUN2QyxjQUErQjtRQUUvQixNQUFNLGNBQWMsR0FBZ0IsSUFBSSxHQUFHLEVBQVUsQ0FBQztRQUN0RCxNQUFNLG9CQUFvQixHQUFxQyxFQUFFLENBQUM7UUFDbEUsTUFBTSxtQkFBbUIsR0FBYSxFQUFFLENBQUM7UUFDekMsTUFBTSxpQkFBaUIsR0FBb0MsRUFBRSxDQUFDO1FBQzlELE1BQU0sV0FBVyxHQUF1QixNQUFNLENBQUEsY0FBYyxhQUFkLGNBQWMsdUJBQWQsY0FBYyxDQUFFLFdBQVcsQ0FBQSxDQUFDO1FBRTFFLEtBQUssTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLElBQUksVUFBVSxFQUFFO1lBQ3BELE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUV2RixJQUFJLGNBQWMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUU7Z0JBQ25DLFNBQVM7YUFDVjtZQUVELGNBQWMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFaEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN0RCxNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUMsQ0FBQztZQUN6RSxJQUFJLFVBQVUsRUFBRTtnQkFDZCxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsR0FBRyxVQUFVLENBQUM7Z0JBQzVDLFNBQVM7YUFDVjtZQUVELG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUN2RCxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDdkM7UUFFRCxJQUFJLG1CQUFtQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDbEMsTUFBTSxZQUFZLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxjQUFjLENBQUMsQ0FBQztZQUM1RixLQUFLLE1BQU0sT0FBTyxJQUFJLG1CQUFtQixFQUFFO2dCQUN6QyxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3BELElBQUksSUFBSSxFQUFFO29CQUNSLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQztvQkFFbEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDbEQsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDO2lCQUM3RDthQUNGO1NBQ0Y7UUFFRCxPQUFPO1lBQ0wsT0FBTyxFQUFFLENBQUMsTUFBYSxFQUFFLE1BQWEsRUFBRSxTQUFvQixFQUFvQixFQUFFO2dCQUNoRixNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUN2RSxPQUFPLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3hDLENBQUM7WUFDRCxnQkFBZ0IsRUFBRSxDQUFDLE9BQWUsRUFBb0IsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQztZQUNuRixXQUFXLEVBQUUsR0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztTQUM1RCxDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVYzUG9vbFByb3ZpZGVyLCBWM1Bvb2xBY2Nlc3NvciB9IGZyb20gXCJAdm90b3BpYS9zbWFydC1vcmRlci1yb3V0ZXJcIjtcbmltcG9ydCB7IFRva2VuLCBGZWVBbW91bnQsIFBvb2wgfSBmcm9tIFwiQHZvdG9waWEvc2RrLWNvcmVcIjtcbmltcG9ydCB7IFByb3ZpZGVyQ29uZmlnIH0gZnJvbSBcIkB2b3RvcGlhL3NtYXJ0LW9yZGVyLXJvdXRlci9idWlsZC9tYWluL3Byb3ZpZGVycy9wcm92aWRlclwiO1xuXG5pbXBvcnQgeyBJRHluYW1vQ2FjaGUgfSBmcm9tIFwiLi4vY2FjaGUtZHluYW1vXCI7XG5pbXBvcnQgeyBEeW5hbW9DYWNoaW5nVjNQb29sIH0gZnJvbSBcIi4vY2FjaGUtZHluYW1vLXBvb2xcIjtcblxuZXhwb3J0IGNsYXNzIER5bmFtb0RCQ2FjaGluZ1YzUG9vbFByb3ZpZGVyIGltcGxlbWVudHMgSVYzUG9vbFByb3ZpZGVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBkeW5hbW9DYWNoZTogSUR5bmFtb0NhY2hlPHN0cmluZywgbnVtYmVyLCBQb29sPjtcbiAgcHJpdmF0ZSByZWFkb25seSBQT09MX0NBQ0hFX0tFWSA9IChhZGRyZXNzOiBzdHJpbmcpID0+IGBwb29sLSR7YWRkcmVzc31gO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBwb29sUHJvdmlkZXI6IElWM1Bvb2xQcm92aWRlciwgdGFibGVOYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLmR5bmFtb0NhY2hlID0gbmV3IER5bmFtb0NhY2hpbmdWM1Bvb2woeyB0YWJsZU5hbWUsIHR0bE1pbnV0ZXM6IDEgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UG9vbEFkZHJlc3MoXG4gICAgdG9rZW5BOiBUb2tlbixcbiAgICB0b2tlbkI6IFRva2VuLFxuICAgIGZlZUFtb3VudDogRmVlQW1vdW50XG4gICk6IHtcbiAgICBwb29sQWRkcmVzczogc3RyaW5nO1xuICAgIHRva2VuMDogVG9rZW47XG4gICAgdG9rZW4xOiBUb2tlbjtcbiAgfSB7XG4gICAgcmV0dXJuIHRoaXMucG9vbFByb3ZpZGVyLmdldFBvb2xBZGRyZXNzKHRva2VuQSwgdG9rZW5CLCBmZWVBbW91bnQpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFBvb2xzKFxuICAgIHRva2VuUGFpcnM6IFtUb2tlbiwgVG9rZW4sIEZlZUFtb3VudF1bXSxcbiAgICBwcm92aWRlckNvbmZpZz86IFByb3ZpZGVyQ29uZmlnXG4gICk6IFByb21pc2U8VjNQb29sQWNjZXNzb3I+IHtcbiAgICBjb25zdCBwb29sQWRkcmVzc1NldDogU2V0PHN0cmluZz4gPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICBjb25zdCBwb29sc1RvR2V0VG9rZW5QYWlyczogQXJyYXk8W1Rva2VuLCBUb2tlbiwgRmVlQW1vdW50XT4gPSBbXTtcbiAgICBjb25zdCBwb29sc1RvR2V0QWRkcmVzc2VzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvbnN0IHBvb2xBZGRyZXNzVG9Qb29sOiB7IFtwb29sQWRkcmVzczogc3RyaW5nXTogUG9vbCB9ID0ge307XG4gICAgY29uc3QgYmxvY2tOdW1iZXI6IG51bWJlciB8IHVuZGVmaW5lZCA9IGF3YWl0IHByb3ZpZGVyQ29uZmlnPy5ibG9ja051bWJlcjtcblxuICAgIGZvciAoY29uc3QgW3Rva2VuQSwgdG9rZW5CLCBmZWVBbW91bnRdIG9mIHRva2VuUGFpcnMpIHtcbiAgICAgIGNvbnN0IHsgcG9vbEFkZHJlc3MsIHRva2VuMCwgdG9rZW4xIH0gPSB0aGlzLmdldFBvb2xBZGRyZXNzKHRva2VuQSwgdG9rZW5CLCBmZWVBbW91bnQpO1xuXG4gICAgICBpZiAocG9vbEFkZHJlc3NTZXQuaGFzKHBvb2xBZGRyZXNzKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcG9vbEFkZHJlc3NTZXQuYWRkKHBvb2xBZGRyZXNzKTtcblxuICAgICAgY29uc3QgcGFydGl0aW9uS2V5ID0gdGhpcy5QT09MX0NBQ0hFX0tFWShwb29sQWRkcmVzcyk7XG4gICAgICBjb25zdCBjYWNoZWRQb29sID0gYXdhaXQgdGhpcy5keW5hbW9DYWNoZS5nZXQocGFydGl0aW9uS2V5LCBibG9ja051bWJlcik7XG4gICAgICBpZiAoY2FjaGVkUG9vbCkge1xuICAgICAgICBwb29sQWRkcmVzc1RvUG9vbFtwb29sQWRkcmVzc10gPSBjYWNoZWRQb29sO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcG9vbHNUb0dldFRva2VuUGFpcnMucHVzaChbdG9rZW4wLCB0b2tlbjEsIGZlZUFtb3VudF0pO1xuICAgICAgcG9vbHNUb0dldEFkZHJlc3Nlcy5wdXNoKHBvb2xBZGRyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAocG9vbHNUb0dldEFkZHJlc3Nlcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBwb29sQWNjZXNzb3IgPSBhd2FpdCB0aGlzLnBvb2xQcm92aWRlci5nZXRQb29scyhwb29sc1RvR2V0VG9rZW5QYWlycywgcHJvdmlkZXJDb25maWcpO1xuICAgICAgZm9yIChjb25zdCBhZGRyZXNzIG9mIHBvb2xzVG9HZXRBZGRyZXNzZXMpIHtcbiAgICAgICAgY29uc3QgcG9vbCA9IHBvb2xBY2Nlc3Nvci5nZXRQb29sQnlBZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICBpZiAocG9vbCkge1xuICAgICAgICAgIHBvb2xBZGRyZXNzVG9Qb29sW2FkZHJlc3NdID0gcG9vbDtcblxuICAgICAgICAgIGNvbnN0IHBhcnRpdGlvbktleSA9IHRoaXMuUE9PTF9DQUNIRV9LRVkoYWRkcmVzcyk7XG4gICAgICAgICAgYXdhaXQgdGhpcy5keW5hbW9DYWNoZS5zZXQocG9vbCwgcGFydGl0aW9uS2V5LCBibG9ja051bWJlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZ2V0UG9vbDogKHRva2VuQTogVG9rZW4sIHRva2VuQjogVG9rZW4sIGZlZUFtb3VudDogRmVlQW1vdW50KTogUG9vbCB8IHVuZGVmaW5lZCA9PiB7XG4gICAgICAgIGNvbnN0IHsgcG9vbEFkZHJlc3MgfSA9IHRoaXMuZ2V0UG9vbEFkZHJlc3ModG9rZW5BLCB0b2tlbkIsIGZlZUFtb3VudCk7XG4gICAgICAgIHJldHVybiBwb29sQWRkcmVzc1RvUG9vbFtwb29sQWRkcmVzc107XG4gICAgICB9LFxuICAgICAgZ2V0UG9vbEJ5QWRkcmVzczogKGFkZHJlc3M6IHN0cmluZyk6IFBvb2wgfCB1bmRlZmluZWQgPT4gcG9vbEFkZHJlc3NUb1Bvb2xbYWRkcmVzc10sXG4gICAgICBnZXRBbGxQb29sczogKCk6IFBvb2xbXSA9PiBPYmplY3QudmFsdWVzKHBvb2xBZGRyZXNzVG9Qb29sKSxcbiAgICB9O1xuICB9XG59XG4iXX0=