import { CachedRoutes } from "@votopia/smart-order-router";
import { TokenMarshaller } from "./token-marshaller";
import { CachedRouteMarshaller } from "./cached-route-marshaller";
export class CachedRoutesMarshaller {
    static marshal(cachedRoutes) {
        return {
            routes: cachedRoutes.routes.map((route) => CachedRouteMarshaller.marshal(route)),
            tokenIn: TokenMarshaller.marshal(cachedRoutes.tokenIn),
            tokenOut: TokenMarshaller.marshal(cachedRoutes.tokenOut),
            protocolsCovered: cachedRoutes.protocolsCovered,
            blockNumber: cachedRoutes.blockNumber,
            tradeType: cachedRoutes.tradeType,
            originalAmount: cachedRoutes.originalAmount,
            blocksToLive: cachedRoutes.blocksToLive,
        };
    }
    static unmarshal(marshalledCachedRoutes) {
        return new CachedRoutes({
            routes: marshalledCachedRoutes.routes.map((route) => CachedRouteMarshaller.unmarshal(route)),
            tokenIn: TokenMarshaller.unmarshal(marshalledCachedRoutes.tokenIn),
            tokenOut: TokenMarshaller.unmarshal(marshalledCachedRoutes.tokenOut),
            protocolsCovered: marshalledCachedRoutes.protocolsCovered,
            blockNumber: marshalledCachedRoutes.blockNumber,
            tradeType: marshalledCachedRoutes.tradeType,
            originalAmount: marshalledCachedRoutes.originalAmount,
            blocksToLive: marshalledCachedRoutes.blocksToLive,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGVkLXJvdXRlcy1tYXJzaGFsbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL2hhbmRsZXJzL21hcnNoYWxsaW5nL2NhY2hlZC1yb3V0ZXMtbWFyc2hhbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHM0QsT0FBTyxFQUFtQixlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUscUJBQXFCLEVBQXlCLE1BQU0sMkJBQTJCLENBQUM7QUFjekYsTUFBTSxPQUFPLHNCQUFzQjtJQUMxQixNQUFNLENBQUMsT0FBTyxDQUFDLFlBQTBCO1FBQzlDLE9BQU87WUFDTCxNQUFNLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUVoRixPQUFPLEVBQUUsZUFBZSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDO1lBQ3RELFFBQVEsRUFBRSxlQUFlLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7WUFDeEQsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLGdCQUFnQjtZQUMvQyxXQUFXLEVBQUUsWUFBWSxDQUFDLFdBQVc7WUFDckMsU0FBUyxFQUFFLFlBQVksQ0FBQyxTQUFTO1lBQ2pDLGNBQWMsRUFBRSxZQUFZLENBQUMsY0FBYztZQUMzQyxZQUFZLEVBQUUsWUFBWSxDQUFDLFlBQVk7U0FDeEMsQ0FBQztJQUNKLENBQUM7SUFFTSxNQUFNLENBQUMsU0FBUyxDQUFDLHNCQUE4QztRQUNwRSxPQUFPLElBQUksWUFBWSxDQUFDO1lBQ3RCLE1BQU0sRUFBRSxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFNUYsT0FBTyxFQUFFLGVBQWUsQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDO1lBQ2xFLFFBQVEsRUFBRSxlQUFlLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQztZQUNwRSxnQkFBZ0IsRUFBRSxzQkFBc0IsQ0FBQyxnQkFBZ0I7WUFDekQsV0FBVyxFQUFFLHNCQUFzQixDQUFDLFdBQVc7WUFDL0MsU0FBUyxFQUFFLHNCQUFzQixDQUFDLFNBQVM7WUFDM0MsY0FBYyxFQUFFLHNCQUFzQixDQUFDLGNBQWM7WUFDckQsWUFBWSxFQUFFLHNCQUFzQixDQUFDLFlBQVk7U0FDbEQsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FjaGVkUm91dGVzIH0gZnJvbSBcIkB2b3RvcGlhL3NtYXJ0LW9yZGVyLXJvdXRlclwiO1xuaW1wb3J0IHsgVHJhZGVUeXBlLCBQcm90b2NvbCB9IGZyb20gXCJAdm90b3BpYS9zZGstY29yZVwiO1xuXG5pbXBvcnQgeyBNYXJzaGFsbGVkVG9rZW4sIFRva2VuTWFyc2hhbGxlciB9IGZyb20gXCIuL3Rva2VuLW1hcnNoYWxsZXJcIjtcbmltcG9ydCB7IENhY2hlZFJvdXRlTWFyc2hhbGxlciwgTWFyc2hhbGxlZENhY2hlZFJvdXRlIH0gZnJvbSBcIi4vY2FjaGVkLXJvdXRlLW1hcnNoYWxsZXJcIjtcblxuZXhwb3J0IGludGVyZmFjZSBNYXJzaGFsbGVkQ2FjaGVkUm91dGVzIHtcbiAgcm91dGVzOiBNYXJzaGFsbGVkQ2FjaGVkUm91dGVbXTtcblxuICB0b2tlbkluOiBNYXJzaGFsbGVkVG9rZW47XG4gIHRva2VuT3V0OiBNYXJzaGFsbGVkVG9rZW47XG4gIHByb3RvY29sc0NvdmVyZWQ6IFByb3RvY29sW107XG4gIGJsb2NrTnVtYmVyOiBudW1iZXI7XG4gIHRyYWRlVHlwZTogVHJhZGVUeXBlO1xuICBvcmlnaW5hbEFtb3VudDogc3RyaW5nO1xuICBibG9ja3NUb0xpdmU6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIENhY2hlZFJvdXRlc01hcnNoYWxsZXIge1xuICBwdWJsaWMgc3RhdGljIG1hcnNoYWwoY2FjaGVkUm91dGVzOiBDYWNoZWRSb3V0ZXMpOiBNYXJzaGFsbGVkQ2FjaGVkUm91dGVzIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVzOiBjYWNoZWRSb3V0ZXMucm91dGVzLm1hcCgocm91dGUpID0+IENhY2hlZFJvdXRlTWFyc2hhbGxlci5tYXJzaGFsKHJvdXRlKSksXG5cbiAgICAgIHRva2VuSW46IFRva2VuTWFyc2hhbGxlci5tYXJzaGFsKGNhY2hlZFJvdXRlcy50b2tlbkluKSxcbiAgICAgIHRva2VuT3V0OiBUb2tlbk1hcnNoYWxsZXIubWFyc2hhbChjYWNoZWRSb3V0ZXMudG9rZW5PdXQpLFxuICAgICAgcHJvdG9jb2xzQ292ZXJlZDogY2FjaGVkUm91dGVzLnByb3RvY29sc0NvdmVyZWQsXG4gICAgICBibG9ja051bWJlcjogY2FjaGVkUm91dGVzLmJsb2NrTnVtYmVyLFxuICAgICAgdHJhZGVUeXBlOiBjYWNoZWRSb3V0ZXMudHJhZGVUeXBlLFxuICAgICAgb3JpZ2luYWxBbW91bnQ6IGNhY2hlZFJvdXRlcy5vcmlnaW5hbEFtb3VudCxcbiAgICAgIGJsb2Nrc1RvTGl2ZTogY2FjaGVkUm91dGVzLmJsb2Nrc1RvTGl2ZSxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyB1bm1hcnNoYWwobWFyc2hhbGxlZENhY2hlZFJvdXRlczogTWFyc2hhbGxlZENhY2hlZFJvdXRlcyk6IENhY2hlZFJvdXRlcyB7XG4gICAgcmV0dXJuIG5ldyBDYWNoZWRSb3V0ZXMoe1xuICAgICAgcm91dGVzOiBtYXJzaGFsbGVkQ2FjaGVkUm91dGVzLnJvdXRlcy5tYXAoKHJvdXRlKSA9PiBDYWNoZWRSb3V0ZU1hcnNoYWxsZXIudW5tYXJzaGFsKHJvdXRlKSksXG5cbiAgICAgIHRva2VuSW46IFRva2VuTWFyc2hhbGxlci51bm1hcnNoYWwobWFyc2hhbGxlZENhY2hlZFJvdXRlcy50b2tlbkluKSxcbiAgICAgIHRva2VuT3V0OiBUb2tlbk1hcnNoYWxsZXIudW5tYXJzaGFsKG1hcnNoYWxsZWRDYWNoZWRSb3V0ZXMudG9rZW5PdXQpLFxuICAgICAgcHJvdG9jb2xzQ292ZXJlZDogbWFyc2hhbGxlZENhY2hlZFJvdXRlcy5wcm90b2NvbHNDb3ZlcmVkLFxuICAgICAgYmxvY2tOdW1iZXI6IG1hcnNoYWxsZWRDYWNoZWRSb3V0ZXMuYmxvY2tOdW1iZXIsXG4gICAgICB0cmFkZVR5cGU6IG1hcnNoYWxsZWRDYWNoZWRSb3V0ZXMudHJhZGVUeXBlLFxuICAgICAgb3JpZ2luYWxBbW91bnQ6IG1hcnNoYWxsZWRDYWNoZWRSb3V0ZXMub3JpZ2luYWxBbW91bnQsXG4gICAgICBibG9ja3NUb0xpdmU6IG1hcnNoYWxsZWRDYWNoZWRSb3V0ZXMuYmxvY2tzVG9MaXZlLFxuICAgIH0pO1xuICB9XG59XG4iXX0=