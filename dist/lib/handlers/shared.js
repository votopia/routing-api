import { Percent, NATIVE_CURRENCY } from "@votopia/sdk-core";
export const SECONDS_PER_BLOCK = 30;
export const DEFAULT_ROUTING_CONFIG = {
    v3PoolSelection: {
        topN: 2,
        topNDirectSwaps: 2,
        topNTokenInOut: 2,
        topNSecondHop: 1,
        topNWithEachBaseToken: 3,
        topNWithBaseToken: 3,
    },
    maxSwapsPerPath: 3,
    minSplits: 1,
    maxSplits: 7,
    distributionPercent: 10,
    forceCrossProtocol: false,
};
export const QUOTE_SPEED_CONFIG = {
    standard: {},
    fast: {
        v2PoolSelection: {
            topN: 1,
            topNDirectSwaps: 1,
            topNTokenInOut: 1,
            topNSecondHop: 0,
            topNWithEachBaseToken: 1,
            topNWithBaseToken: 1,
        },
        v3PoolSelection: {
            topN: 1,
            topNDirectSwaps: 1,
            topNTokenInOut: 1,
            topNSecondHop: 0,
            topNWithEachBaseToken: 1,
            topNWithBaseToken: 1,
        },
        maxSwapsPerPath: 2,
        maxSplits: 1,
        distributionPercent: 100,
        writeToCachedRoutes: false,
    },
};
export const INTENT_SPECIFIC_CONFIG = {
    caching: {
        // When the intent is to create a cache entry, we should not use the cache
        useCachedRoutes: false,
        // This is *super* important to avoid an infinite loop of caching quotes calling themselves
        optimisticCachedRoutes: false,
    },
    quote: {
        // When the intent is to get a quote, we should use the cache and optimistic cached routes
        useCachedRoutes: true,
        optimisticCachedRoutes: true,
    },
    swap: {
        // When the intent is to prepare the swap, we can use cache, but it should not be optimistic
        useCachedRoutes: true,
        optimisticCachedRoutes: false,
    },
    pricing: {
        // When the intent is to get pricing, we should use the cache and optimistic cached routes
        useCachedRoutes: true,
        optimisticCachedRoutes: true,
    },
};
export const FEE_ON_TRANSFER_SPECIFIC_CONFIG = (enableFeeOnTransferFeeFetching) => {
    return {
        enableFeeOnTransferFeeFetching: enableFeeOnTransferFeeFetching,
    };
};
export async function tokenStringToCurrency(tokenListProvider, tokenProvider, tokenRaw, log) {
    const isAddress = (s) => s.length == 42 && s.startsWith("0x");
    let token = undefined;
    if (NATIVE_CURRENCY.symbol === tokenRaw.toUpperCase()) {
        token = NATIVE_CURRENCY;
    }
    else if (isAddress(tokenRaw)) {
        token = await tokenListProvider.getTokenByAddress(tokenRaw);
    }
    if (!token) {
        token = await tokenListProvider.getTokenBySymbol(tokenRaw);
    }
    if (token) {
        log.info({
            tokenAddress: token.wrapped.address,
        }, `Got input token from token list`);
        return token;
    }
    log.info(`Getting input token ${tokenRaw} from chain`);
    if (!token && isAddress(tokenRaw)) {
        const tokenAccessor = await tokenProvider.getTokens([tokenRaw]);
        return tokenAccessor.getTokenByAddress(tokenRaw);
    }
    return undefined;
}
export function parseSlippageTolerance(slippageTolerance) {
    const slippagePer10k = Math.round(parseFloat(slippageTolerance) * 100);
    return new Percent(slippagePer10k, 10000);
}
export function parseDeadline(deadline) {
    return Math.floor(Date.now() / 1000) + parseInt(deadline);
}
export function parsePortionPercent(portionBips) {
    return new Percent(portionBips, 10000);
}
export function parseFeeOptions(portionBips, portionRecipient) {
    if (!portionBips || !portionRecipient) {
        return undefined;
    }
    return { fee: parsePortionPercent(portionBips), recipient: portionRecipient };
}
export function parseFlatFeeOptions(portionAmount, portionRecipient) {
    if (!portionAmount || !portionRecipient) {
        return undefined;
    }
    return { amount: portionAmount, recipient: portionRecipient };
}
export function populateFeeOptions(type, portionBips, portionRecipient, portionAmount) {
    switch (type) {
        case "exactIn":
            const feeOptions = parseFeeOptions(portionBips, portionRecipient);
            return { fee: feeOptions };
        case "exactOut":
            const flatFeeOptions = parseFlatFeeOptions(portionAmount, portionRecipient);
            return { flatFee: flatFeeOptions };
        default:
            return undefined;
    }
}
export function computePortionAmount(currencyOut, portionBips) {
    if (!portionBips) {
        return undefined;
    }
    return currencyOut.multiply(parsePortionPercent(portionBips)).quotient.toString();
}
export const DEFAULT_DEADLINE = 600; // 10 minutes
//# sourceMappingURL=data:application/json;base64,