import { CachingTokenListProvider, log, NodeJSCache, } from "@votopia/smart-order-router";
import S3 from "aws-sdk/clients/s3";
import NodeCache from "node-cache";
const TOKEN_LIST_CACHE = new NodeCache({ stdTTL: 600, useClones: false });
export class AWSTokenListProvider extends CachingTokenListProvider {
    static async fromTokenListS3Bucket(bucket, tokenListURI) {
        const s3 = new S3({ correctClockSkew: true, maxRetries: 3 });
        const cachedTokenList = TOKEN_LIST_CACHE.get(tokenListURI);
        const tokenCache = new NodeCache({ stdTTL: 360, useClones: false });
        if (cachedTokenList) {
            log.info(`Found token lists for ${tokenListURI} in local cache`);
            return super.fromTokenList(cachedTokenList, new NodeJSCache(tokenCache));
        }
        try {
            log.info(`Getting tokenLists from s3.`);
            const tokenListResult = await s3.getObject({ Key: encodeURIComponent(tokenListURI), Bucket: bucket }).promise();
            const { Body: tokenListBuffer } = tokenListResult;
            if (!tokenListBuffer) {
                return super.fromTokenListURI(tokenListURI, new NodeJSCache(tokenCache));
            }
            const tokenList = JSON.parse(tokenListBuffer.toString("utf-8"));
            log.info(`Got both tokenLists from s3. ${tokenList.tokens.length} tokens in main list.`);
            TOKEN_LIST_CACHE.set(tokenListURI, tokenList);
            return new CachingTokenListProvider(tokenList, new NodeJSCache(tokenCache));
        }
        catch (err) {
            log.info({ err }, `Failed to get tokenLists from s3.`);
            return super.fromTokenListURI(tokenListURI, new NodeJSCache(tokenCache));
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzLXRva2VuLWxpc3QtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvaGFuZGxlcnMvcm91dGVyLWVudGl0aWVzL2F3cy10b2tlbi1saXN0LXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx3QkFBd0IsRUFHeEIsR0FBRyxFQUNILFdBQVcsR0FDWixNQUFNLDZCQUE2QixDQUFDO0FBR3JDLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BDLE9BQU8sU0FBUyxNQUFNLFlBQVksQ0FBQztBQUVuQyxNQUFNLGdCQUFnQixHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUUxRSxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsd0JBQXdCO0lBQ3pELE1BQU0sQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQ3ZDLE1BQWMsRUFDZCxZQUFvQjtRQUVwQixNQUFNLEVBQUUsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUU3RCxNQUFNLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQVksWUFBWSxDQUFDLENBQUM7UUFFdEUsTUFBTSxVQUFVLEdBQUcsSUFBSSxTQUFTLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRXBFLElBQUksZUFBZSxFQUFFO1lBQ25CLEdBQUcsQ0FBQyxJQUFJLENBQUMseUJBQXlCLFlBQVksaUJBQWlCLENBQUMsQ0FBQztZQUNqRSxPQUFPLEtBQUssQ0FBQyxhQUFhLENBQUMsZUFBZSxFQUFFLElBQUksV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7U0FDMUU7UUFFRCxJQUFJO1lBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sZUFBZSxHQUFHLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUVoSCxNQUFNLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxHQUFHLGVBQWUsQ0FBQztZQUVsRCxJQUFJLENBQUMsZUFBZSxFQUFFO2dCQUNwQixPQUFPLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQzthQUMxRTtZQUVELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBYyxDQUFDO1lBRTdFLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSx1QkFBdUIsQ0FBQyxDQUFDO1lBRXpGLGdCQUFnQixDQUFDLEdBQUcsQ0FBWSxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFekQsT0FBTyxJQUFJLHdCQUF3QixDQUFDLFNBQVMsRUFBRSxJQUFJLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1NBQzdFO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsbUNBQW1DLENBQUMsQ0FBQztZQUN2RCxPQUFPLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztTQUMxRTtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENhY2hpbmdUb2tlbkxpc3RQcm92aWRlcixcbiAgSVRva2VuTGlzdFByb3ZpZGVyLFxuICBJVG9rZW5Qcm92aWRlcixcbiAgbG9nLFxuICBOb2RlSlNDYWNoZSxcbn0gZnJvbSBcIkB2b3RvcGlhL3NtYXJ0LW9yZGVyLXJvdXRlclwiO1xuXG5pbXBvcnQgeyBUb2tlbkxpc3QgfSBmcm9tIFwiQHZvdG9waWEvc2RrLWNvcmVcIjtcbmltcG9ydCBTMyBmcm9tIFwiYXdzLXNkay9jbGllbnRzL3MzXCI7XG5pbXBvcnQgTm9kZUNhY2hlIGZyb20gXCJub2RlLWNhY2hlXCI7XG5cbmNvbnN0IFRPS0VOX0xJU1RfQ0FDSEUgPSBuZXcgTm9kZUNhY2hlKHsgc3RkVFRMOiA2MDAsIHVzZUNsb25lczogZmFsc2UgfSk7XG5cbmV4cG9ydCBjbGFzcyBBV1NUb2tlbkxpc3RQcm92aWRlciBleHRlbmRzIENhY2hpbmdUb2tlbkxpc3RQcm92aWRlciB7XG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgZnJvbVRva2VuTGlzdFMzQnVja2V0KFxuICAgIGJ1Y2tldDogc3RyaW5nLFxuICAgIHRva2VuTGlzdFVSSTogc3RyaW5nXG4gICk6IFByb21pc2U8SVRva2VuTGlzdFByb3ZpZGVyICYgSVRva2VuUHJvdmlkZXI+IHtcbiAgICBjb25zdCBzMyA9IG5ldyBTMyh7IGNvcnJlY3RDbG9ja1NrZXc6IHRydWUsIG1heFJldHJpZXM6IDMgfSk7XG5cbiAgICBjb25zdCBjYWNoZWRUb2tlbkxpc3QgPSBUT0tFTl9MSVNUX0NBQ0hFLmdldDxUb2tlbkxpc3Q+KHRva2VuTGlzdFVSSSk7XG5cbiAgICBjb25zdCB0b2tlbkNhY2hlID0gbmV3IE5vZGVDYWNoZSh7IHN0ZFRUTDogMzYwLCB1c2VDbG9uZXM6IGZhbHNlIH0pO1xuXG4gICAgaWYgKGNhY2hlZFRva2VuTGlzdCkge1xuICAgICAgbG9nLmluZm8oYEZvdW5kIHRva2VuIGxpc3RzIGZvciAke3Rva2VuTGlzdFVSSX0gaW4gbG9jYWwgY2FjaGVgKTtcbiAgICAgIHJldHVybiBzdXBlci5mcm9tVG9rZW5MaXN0KGNhY2hlZFRva2VuTGlzdCwgbmV3IE5vZGVKU0NhY2hlKHRva2VuQ2FjaGUpKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgbG9nLmluZm8oYEdldHRpbmcgdG9rZW5MaXN0cyBmcm9tIHMzLmApO1xuICAgICAgY29uc3QgdG9rZW5MaXN0UmVzdWx0ID0gYXdhaXQgczMuZ2V0T2JqZWN0KHsgS2V5OiBlbmNvZGVVUklDb21wb25lbnQodG9rZW5MaXN0VVJJKSwgQnVja2V0OiBidWNrZXQgfSkucHJvbWlzZSgpO1xuXG4gICAgICBjb25zdCB7IEJvZHk6IHRva2VuTGlzdEJ1ZmZlciB9ID0gdG9rZW5MaXN0UmVzdWx0O1xuXG4gICAgICBpZiAoIXRva2VuTGlzdEJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gc3VwZXIuZnJvbVRva2VuTGlzdFVSSSh0b2tlbkxpc3RVUkksIG5ldyBOb2RlSlNDYWNoZSh0b2tlbkNhY2hlKSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRva2VuTGlzdCA9IEpTT04ucGFyc2UodG9rZW5MaXN0QnVmZmVyLnRvU3RyaW5nKFwidXRmLThcIikpIGFzIFRva2VuTGlzdDtcblxuICAgICAgbG9nLmluZm8oYEdvdCBib3RoIHRva2VuTGlzdHMgZnJvbSBzMy4gJHt0b2tlbkxpc3QudG9rZW5zLmxlbmd0aH0gdG9rZW5zIGluIG1haW4gbGlzdC5gKTtcblxuICAgICAgVE9LRU5fTElTVF9DQUNIRS5zZXQ8VG9rZW5MaXN0Pih0b2tlbkxpc3RVUkksIHRva2VuTGlzdCk7XG5cbiAgICAgIHJldHVybiBuZXcgQ2FjaGluZ1Rva2VuTGlzdFByb3ZpZGVyKHRva2VuTGlzdCwgbmV3IE5vZGVKU0NhY2hlKHRva2VuQ2FjaGUpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZy5pbmZvKHsgZXJyIH0sIGBGYWlsZWQgdG8gZ2V0IHRva2VuTGlzdHMgZnJvbSBzMy5gKTtcbiAgICAgIHJldHVybiBzdXBlci5mcm9tVG9rZW5MaXN0VVJJKHRva2VuTGlzdFVSSSwgbmV3IE5vZGVKU0NhY2hlKHRva2VuQ2FjaGUpKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==