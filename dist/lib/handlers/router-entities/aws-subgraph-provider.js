import { Protocol } from "@votopia/sdk-core";
import { log } from "@votopia/smart-order-router";
import { S3 } from "aws-sdk";
import NodeCache from "node-cache";
import { S3_POOL_CACHE_KEY } from "../../util/pool-cache-key";
const POOL_CACHE = new NodeCache({ stdTTL: 240, useClones: false });
const LOCAL_POOL_CACHE_KEY = (protocol) => `pools#${protocol}`;
const s3 = new S3({ correctClockSkew: true, maxRetries: 1 });
export class AWSSubgraphProvider {
    constructor(protocol, bucket, baseKey) {
        this.protocol = protocol;
        this.bucket = bucket;
        this.baseKey = baseKey;
    }
    async getPools() {
        log.info(`In new AWS subgraph provider for protocol ${this.protocol}`);
        const cachedPools = POOL_CACHE.get(LOCAL_POOL_CACHE_KEY(this.protocol));
        if (cachedPools) {
            log.info({ subgraphPoolsSample: cachedPools.slice(0, 5) }, `Subgraph pools fetched from local cache for protocol ${this.protocol}. Num: ${cachedPools.length}`);
            return cachedPools;
        }
        log.info({ bucket: this.bucket, key: this.baseKey }, `Subgraph pools local cache miss for protocol ${this.protocol}. Getting subgraph pools from S3`);
        const pools = await cachePoolsFromS3(s3, this.bucket, this.baseKey, this.protocol);
        return pools;
    }
}
export const cachePoolsFromS3 = async (s3, bucket, baseKey, protocol) => {
    const key = S3_POOL_CACHE_KEY(baseKey, protocol);
    let result;
    try {
        result = await s3.getObject({ Key: key, Bucket: bucket }).promise();
    }
    catch (err) {
        log.error({ bucket, key, err }, `Failed to get pools from S3 for ${protocol}`);
        throw new Error(`Failed to get pools from S3 for ${protocol}`);
    }
    const { Body: poolsBuffer } = result;
    if (!poolsBuffer) {
        throw new Error(`Could not get subgraph pool cache from S3 for protocol ${protocol}`);
    }
    const pools = JSON.parse(poolsBuffer.toString("utf-8"));
    log.info({ bucket, key }, `Got subgraph pools from S3 for protocol ${protocol}. Num: ${pools.length}`);
    POOL_CACHE.set(LOCAL_POOL_CACHE_KEY(protocol), pools);
    return pools;
};
export class V3AWSSubgraphProvider extends AWSSubgraphProvider {
    constructor(bucket, baseKey) {
        super(Protocol.V3, bucket, baseKey);
    }
    static async EagerBuild(bucket, baseKey) {
        await cachePoolsFromS3(s3, bucket, baseKey, Protocol.V3);
        return new V3AWSSubgraphProvider(bucket, baseKey);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzLXN1YmdyYXBoLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL2hhbmRsZXJzL3JvdXRlci1lbnRpdGllcy9hd3Mtc3ViZ3JhcGgtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzdDLE9BQU8sRUFBdUIsR0FBRyxFQUFrQixNQUFNLDZCQUE2QixDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFN0IsT0FBTyxTQUFTLE1BQU0sWUFBWSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRTlELE1BQU0sVUFBVSxHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUNwRSxNQUFNLG9CQUFvQixHQUFHLENBQUMsUUFBa0IsRUFBRSxFQUFFLENBQUMsU0FBUyxRQUFRLEVBQUUsQ0FBQztBQUN6RSxNQUFNLEVBQUUsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUU3RCxNQUFNLE9BQU8sbUJBQW1CO0lBQzlCLFlBQW9CLFFBQWtCLEVBQVUsTUFBYyxFQUFVLE9BQWU7UUFBbkUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxZQUFPLEdBQVAsT0FBTyxDQUFRO0lBQUcsQ0FBQztJQUVwRixLQUFLLENBQUMsUUFBUTtRQUNuQixHQUFHLENBQUMsSUFBSSxDQUFDLDZDQUE2QyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUV2RSxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFrQixvQkFB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Y29yZVwiO1xuaW1wb3J0IHsgSVYzU3ViZ3JhcGhQcm92aWRlciwgbG9nLCBWM1N1YmdyYXBoUG9vbCB9IGZyb20gXCJAdm90b3BpYS9zbWFydC1vcmRlci1yb3V0ZXJcIjtcbmltcG9ydCB7IFMzIH0gZnJvbSBcImF3cy1zZGtcIjtcblxuaW1wb3J0IE5vZGVDYWNoZSBmcm9tIFwibm9kZS1jYWNoZVwiO1xuaW1wb3J0IHsgUzNfUE9PTF9DQUNIRV9LRVkgfSBmcm9tIFwiLi4vLi4vdXRpbC9wb29sLWNhY2hlLWtleVwiO1xuXG5jb25zdCBQT09MX0NBQ0hFID0gbmV3IE5vZGVDYWNoZSh7IHN0ZFRUTDogMjQwLCB1c2VDbG9uZXM6IGZhbHNlIH0pO1xuY29uc3QgTE9DQUxfUE9PTF9DQUNIRV9LRVkgPSAocHJvdG9jb2w6IFByb3RvY29sKSA9PiBgcG9vbHMjJHtwcm90b2NvbH1gO1xuY29uc3QgczMgPSBuZXcgUzMoeyBjb3JyZWN0Q2xvY2tTa2V3OiB0cnVlLCBtYXhSZXRyaWVzOiAxIH0pO1xuXG5leHBvcnQgY2xhc3MgQVdTU3ViZ3JhcGhQcm92aWRlcjxUU3ViZ3JhcGhQb29sIGV4dGVuZHMgVjNTdWJncmFwaFBvb2w+IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwcm90b2NvbDogUHJvdG9jb2wsIHByaXZhdGUgYnVja2V0OiBzdHJpbmcsIHByaXZhdGUgYmFzZUtleTogc3RyaW5nKSB7fVxuXG4gIHB1YmxpYyBhc3luYyBnZXRQb29scygpOiBQcm9taXNlPFRTdWJncmFwaFBvb2xbXT4ge1xuICAgIGxvZy5pbmZvKGBJbiBuZXcgQVdTIHN1YmdyYXBoIHByb3ZpZGVyIGZvciBwcm90b2NvbCAke3RoaXMucHJvdG9jb2x9YCk7XG5cbiAgICBjb25zdCBjYWNoZWRQb29scyA9IFBPT0xfQ0FDSEUuZ2V0PFRTdWJncmFwaFBvb2xbXT4oTE9DQUxfUE9PTF9DQUNIRV9LRVkodGhpcy5wcm90b2NvbCkpO1xuXG4gICAgaWYgKGNhY2hlZFBvb2xzKSB7XG4gICAgICBsb2cuaW5mbyhcbiAgICAgICAgeyBzdWJncmFwaFBvb2xzU2FtcGxlOiBjYWNoZWRQb29scy5zbGljZSgwLCA1KSB9LFxuICAgICAgICBgU3ViZ3JhcGggcG9vbHMgZmV0Y2hlZCBmcm9tIGxvY2FsIGNhY2hlIGZvciBwcm90b2NvbCAke3RoaXMucHJvdG9jb2x9LiBOdW06ICR7Y2FjaGVkUG9vbHMubGVuZ3RofWBcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBjYWNoZWRQb29scztcbiAgICB9XG5cbiAgICBsb2cuaW5mbyhcbiAgICAgIHsgYnVja2V0OiB0aGlzLmJ1Y2tldCwga2V5OiB0aGlzLmJhc2VLZXkgfSxcbiAgICAgIGBTdWJncmFwaCBwb29scyBsb2NhbCBjYWNoZSBtaXNzIGZvciBwcm90b2NvbCAke3RoaXMucHJvdG9jb2x9LiBHZXR0aW5nIHN1YmdyYXBoIHBvb2xzIGZyb20gUzNgXG4gICAgKTtcblxuICAgIGNvbnN0IHBvb2xzID0gYXdhaXQgY2FjaGVQb29sc0Zyb21TMzxUU3ViZ3JhcGhQb29sPihzMywgdGhpcy5idWNrZXQsIHRoaXMuYmFzZUtleSwgdGhpcy5wcm90b2NvbCk7XG5cbiAgICByZXR1cm4gcG9vbHM7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGNhY2hlUG9vbHNGcm9tUzMgPSBhc3luYyA8VFN1YmdyYXBoUG9vbD4oczM6IFMzLCBidWNrZXQ6IHN0cmluZywgYmFzZUtleTogc3RyaW5nLCBwcm90b2NvbDogUHJvdG9jb2wpID0+IHtcbiAgY29uc3Qga2V5ID0gUzNfUE9PTF9DQUNIRV9LRVkoYmFzZUtleSwgcHJvdG9jb2wpO1xuXG4gIGxldCByZXN1bHQ7XG4gIHRyeSB7XG4gICAgcmVzdWx0ID0gYXdhaXQgczMuZ2V0T2JqZWN0KHsgS2V5OiBrZXksIEJ1Y2tldDogYnVja2V0IH0pLnByb21pc2UoKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmVycm9yKHsgYnVja2V0LCBrZXksIGVyciB9LCBgRmFpbGVkIHRvIGdldCBwb29scyBmcm9tIFMzIGZvciAke3Byb3RvY29sfWApO1xuICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGdldCBwb29scyBmcm9tIFMzIGZvciAke3Byb3RvY29sfWApO1xuICB9XG5cbiAgY29uc3QgeyBCb2R5OiBwb29sc0J1ZmZlciB9ID0gcmVzdWx0O1xuXG4gIGlmICghcG9vbHNCdWZmZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBnZXQgc3ViZ3JhcGggcG9vbCBjYWNoZSBmcm9tIFMzIGZvciBwcm90b2NvbCAke3Byb3RvY29sfWApO1xuICB9XG5cbiAgY29uc3QgcG9vbHMgPSBKU09OLnBhcnNlKHBvb2xzQnVmZmVyLnRvU3RyaW5nKFwidXRmLThcIikpIGFzIFRTdWJncmFwaFBvb2xbXTtcblxuICBsb2cuaW5mbyh7IGJ1Y2tldCwga2V5IH0sIGBHb3Qgc3ViZ3JhcGggcG9vbHMgZnJvbSBTMyBmb3IgcHJvdG9jb2wgJHtwcm90b2NvbH0uIE51bTogJHtwb29scy5sZW5ndGh9YCk7XG5cbiAgUE9PTF9DQUNIRS5zZXQ8VFN1YmdyYXBoUG9vbFtdPihMT0NBTF9QT09MX0NBQ0hFX0tFWShwcm90b2NvbCksIHBvb2xzKTtcblxuICByZXR1cm4gcG9vbHM7XG59O1xuXG5leHBvcnQgY2xhc3MgVjNBV1NTdWJncmFwaFByb3ZpZGVyIGV4dGVuZHMgQVdTU3ViZ3JhcGhQcm92aWRlcjxWM1N1YmdyYXBoUG9vbD4gaW1wbGVtZW50cyBJVjNTdWJncmFwaFByb3ZpZGVyIHtcbiAgY29uc3RydWN0b3IoYnVja2V0OiBzdHJpbmcsIGJhc2VLZXk6IHN0cmluZykge1xuICAgIHN1cGVyKFByb3RvY29sLlYzLCBidWNrZXQsIGJhc2VLZXkpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBhc3luYyBFYWdlckJ1aWxkKGJ1Y2tldDogc3RyaW5nLCBiYXNlS2V5OiBzdHJpbmcpOiBQcm9taXNlPFYzQVdTU3ViZ3JhcGhQcm92aWRlcj4ge1xuICAgIGF3YWl0IGNhY2hlUG9vbHNGcm9tUzM8VjNTdWJncmFwaFBvb2w+KHMzLCBidWNrZXQsIGJhc2VLZXksIFByb3RvY29sLlYzKTtcblxuICAgIHJldHVybiBuZXcgVjNBV1NTdWJncmFwaFByb3ZpZGVyKGJ1Y2tldCwgYmFzZUtleSk7XG4gIH1cbn1cbiJdfQ==