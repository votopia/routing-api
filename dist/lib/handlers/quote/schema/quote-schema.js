import BaseJoi from "@hapi/joi";
const Joi = BaseJoi.extend((joi) => ({
    base: joi.array(),
    type: "stringArray",
    messages: {
        "stringArray.type": "{{#label}} is not a valid string array",
    },
    coerce: (value, helpers) => {
        if (typeof value !== "string") {
            return { value: value, errors: [helpers.error("stringArray.type")] };
        }
        value = value.replace(/^\[|\]$/g, "").split(",");
        const ar = value.map((val) => {
            return val.trim();
        });
        return { value: ar };
    },
}));
export const QuoteQueryParamsJoi = Joi.object({
    tokenInAddress: Joi.string().alphanum().max(42).required(),
    tokenOutAddress: Joi.string().alphanum().max(42).required(),
    amount: Joi.string()
        .pattern(/^[0-9]+$/)
        .max(77) // TODO: validate < 2**256
        .required(),
    type: Joi.string().valid("exactIn", "exactOut").required(),
    recipient: Joi.string()
        .pattern(new RegExp(/^0x[a-fA-F0-9]{40}$/))
        .optional(),
    slippageTolerance: Joi.number().min(0).max(20).precision(2).optional(),
    deadline: Joi.number().max(10800).optional(),
    algorithm: Joi.string().valid("alpha", "legacy").optional(),
    gasPriceWei: Joi.string()
        .pattern(/^[0-9]+$/)
        .max(30)
        .optional(),
    minSplits: Joi.number().max(7).optional(),
    forceCrossProtocol: Joi.boolean().optional(),
    forceMixedRoutes: Joi.boolean().optional(),
    protocols: Joi.stringArray().items(Joi.string().valid("v2", "v3", "mixed")).optional(),
    simulateFromAddress: Joi.string().alphanum().max(42).optional(),
    permitSignature: Joi.string().optional(),
    permitNonce: Joi.string().optional(),
    permitExpiration: Joi.number().optional(),
    permitAmount: Joi.string()
        .pattern(/^[0-9]+$/)
        .max(77),
    permitSigDeadline: Joi.number().optional(),
    // TODO: Remove once universal router is no longer behind a feature flag.
    enableUniversalRouter: Joi.boolean().optional().default(false),
    quoteSpeed: Joi.string().valid("fast", "standard").optional().default("standard"),
    debugRoutingConfig: Joi.string().optional(),
    unicornSecret: Joi.string().optional(),
    intent: Joi.string().valid("quote", "swap", "caching", "pricing").optional().default("quote"),
    enableFeeOnTransferFeeFetching: Joi.boolean().optional().default(false),
    portionBips: Joi.string()
        .pattern(/^[0-9]+$/)
        .max(5) // portionBips is a string type with the expectation of being parsable to integer between 0 and 10000
        .optional(),
    portionAmount: Joi.string()
        .pattern(/^[0-9]+$/)
        .optional(),
    portionRecipient: Joi.string().alphanum().max(42).optional(),
});
//# sourceMappingURL=data:application/json;base64,