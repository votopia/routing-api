import { setGlobalLogger } from "@votopia/smart-order-router";
import { S3 } from "aws-sdk";
import { default as bunyan } from "bunyan";
import { S3_POOL_CACHE_KEY } from "../util/pool-cache-key";
import { chainProtocols } from "./cache-config";
const handler = async (event) => {
    const protocol = process.env.protocol;
    // Don't retry for V2 as it will timeout and throw 500
    const provider = chainProtocols.find((element) => element.protocol == protocol).provider;
    const log = bunyan.createLogger({
        name: "RoutingLambda",
        serializers: bunyan.stdSerializers,
        level: "info",
        requestId: event.id,
    });
    setGlobalLogger(log);
    const s3 = new S3();
    log.info(`Getting pools for ${protocol}`);
    let pools;
    try {
        pools = await provider.getPools();
    }
    catch (err) {
        log.error({ err }, `Failed to get pools for ${protocol}`);
        throw new Error(`Failed to get pools for ${protocol}`);
    }
    if (!pools || pools.length == 0) {
        log.info(`No ${protocol} pools found from the subgraph for`);
        return;
    }
    const key = S3_POOL_CACHE_KEY(process.env.POOL_CACHE_KEY, protocol);
    log.info(`Got ${pools.length} ${protocol} pools from the subgraph. Saving to ${key}`);
    const result = await s3
        .putObject({
        Bucket: process.env.POOL_CACHE_BUCKET_2,
        Key: key,
        Body: JSON.stringify(pools),
    })
        .promise();
    log.info({ result }, `Done ${protocol}`);
    log.info(`Successfully cached ${protocol} pools to S3`);
};
module.exports = { handler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtcG9vbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY3Jvbi9jYWNoZS1wb29scy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFOUQsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUU3QixPQUFPLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBcUIsTUFBTSxRQUFRLENBQUM7QUFDOUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRWhELE1BQU0sT0FBTyxHQUFxQixLQUFLLEVBQUUsS0FBcUMsRUFBRSxFQUFFO0lBQ2hGLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBcUIsQ0FBQztJQUNuRCxzREFBc0Q7SUFDdEQsTUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUUsQ0FBQyxRQUFRLENBQUM7SUFDMUYsTUFBTSxHQUFHLEdBQVcsTUFBTSxDQUFDLFlBQVksQ0FBQztRQUN0QyxJQUFJLEVBQUUsZUFBZTtRQUNyQixXQUFXLEVBQUUsTUFBTSxDQUFDLGNBQWM7UUFDbEMsS0FBSyxFQUFFLE1BQU07UUFDYixTQUFTLEVBQUUsS0FBSyxDQUFDLEVBQUU7S0FDcEIsQ0FBQyxDQUFDO0lBQ0gsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXJCLE1BQU0sRUFBRSxHQUFHLElBQUksRUFBRSxFQUFFLENBQUM7SUFFcEIsR0FBRyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUUxQyxJQUFJLEtBQUssQ0FBQztJQUNWLElBQUk7UUFDRixLQUFLLEdBQUcsTUFBTSxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDbkM7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNaLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSwyQkFBMkIsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUMxRCxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixRQUFRLEVBQUUsQ0FBQyxDQUFDO0tBQ3hEO0lBRUQsSUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtRQUMvQixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sUUFBUSxvQ0FBb0MsQ0FBQyxDQUFDO1FBQzdELE9BQU87S0FDUjtJQUVELE1BQU0sR0FBRyxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBZSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRXJFLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLENBQUMsTUFBTSxJQUFJLFFBQVEsdUNBQXVDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFFdEYsTUFBTSxNQUFNLEdBQUcsTUFBTSxFQUFFO1NBQ3BCLFNBQVMsQ0FBQztRQUNULE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFvQjtRQUN4QyxHQUFHLEVBQUUsR0FBRztRQUNSLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztLQUM1QixDQUFDO1NBQ0QsT0FBTyxFQUFFLENBQUM7SUFFYixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsUUFBUSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRXpDLEdBQUcsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLFFBQVEsY0FBYyxDQUFDLENBQUM7QUFDMUQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE9BQU8sR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdG9jb2wgfSBmcm9tIFwiQHZvdG9waWEvc2RrLWNvcmVcIjtcbmltcG9ydCB7IHNldEdsb2JhbExvZ2dlciB9IGZyb20gXCJAdm90b3BpYS9zbWFydC1vcmRlci1yb3V0ZXJcIjtcbmltcG9ydCB7IEV2ZW50QnJpZGdlRXZlbnQsIFNjaGVkdWxlZEhhbmRsZXIgfSBmcm9tIFwiYXdzLWxhbWJkYVwiO1xuaW1wb3J0IHsgUzMgfSBmcm9tIFwiYXdzLXNka1wiO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIGJ1bnlhbiwgZGVmYXVsdCBhcyBMb2dnZXIgfSBmcm9tIFwiYnVueWFuXCI7XG5pbXBvcnQgeyBTM19QT09MX0NBQ0hFX0tFWSB9IGZyb20gXCIuLi91dGlsL3Bvb2wtY2FjaGUta2V5XCI7XG5pbXBvcnQgeyBjaGFpblByb3RvY29scyB9IGZyb20gXCIuL2NhY2hlLWNvbmZpZ1wiO1xuXG5jb25zdCBoYW5kbGVyOiBTY2hlZHVsZWRIYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBFdmVudEJyaWRnZUV2ZW50PHN0cmluZywgdm9pZD4pID0+IHtcbiAgY29uc3QgcHJvdG9jb2wgPSBwcm9jZXNzLmVudi5wcm90b2NvbCEgYXMgUHJvdG9jb2w7XG4gIC8vIERvbid0IHJldHJ5IGZvciBWMiBhcyBpdCB3aWxsIHRpbWVvdXQgYW5kIHRocm93IDUwMFxuICBjb25zdCBwcm92aWRlciA9IGNoYWluUHJvdG9jb2xzLmZpbmQoKGVsZW1lbnQpID0+IGVsZW1lbnQucHJvdG9jb2wgPT0gcHJvdG9jb2wpIS5wcm92aWRlcjtcbiAgY29uc3QgbG9nOiBMb2dnZXIgPSBidW55YW4uY3JlYXRlTG9nZ2VyKHtcbiAgICBuYW1lOiBcIlJvdXRpbmdMYW1iZGFcIixcbiAgICBzZXJpYWxpemVyczogYnVueWFuLnN0ZFNlcmlhbGl6ZXJzLFxuICAgIGxldmVsOiBcImluZm9cIixcbiAgICByZXF1ZXN0SWQ6IGV2ZW50LmlkLFxuICB9KTtcbiAgc2V0R2xvYmFsTG9nZ2VyKGxvZyk7XG5cbiAgY29uc3QgczMgPSBuZXcgUzMoKTtcblxuICBsb2cuaW5mbyhgR2V0dGluZyBwb29scyBmb3IgJHtwcm90b2NvbH1gKTtcblxuICBsZXQgcG9vbHM7XG4gIHRyeSB7XG4gICAgcG9vbHMgPSBhd2FpdCBwcm92aWRlci5nZXRQb29scygpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZXJyb3IoeyBlcnIgfSwgYEZhaWxlZCB0byBnZXQgcG9vbHMgZm9yICR7cHJvdG9jb2x9YCk7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZ2V0IHBvb2xzIGZvciAke3Byb3RvY29sfWApO1xuICB9XG5cbiAgaWYgKCFwb29scyB8fCBwb29scy5sZW5ndGggPT0gMCkge1xuICAgIGxvZy5pbmZvKGBObyAke3Byb3RvY29sfSBwb29scyBmb3VuZCBmcm9tIHRoZSBzdWJncmFwaCBmb3JgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBrZXkgPSBTM19QT09MX0NBQ0hFX0tFWShwcm9jZXNzLmVudi5QT09MX0NBQ0hFX0tFWSEsIHByb3RvY29sKTtcblxuICBsb2cuaW5mbyhgR290ICR7cG9vbHMubGVuZ3RofSAke3Byb3RvY29sfSBwb29scyBmcm9tIHRoZSBzdWJncmFwaC4gU2F2aW5nIHRvICR7a2V5fWApO1xuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHMzXG4gICAgLnB1dE9iamVjdCh7XG4gICAgICBCdWNrZXQ6IHByb2Nlc3MuZW52LlBPT0xfQ0FDSEVfQlVDS0VUXzIhLFxuICAgICAgS2V5OiBrZXksXG4gICAgICBCb2R5OiBKU09OLnN0cmluZ2lmeShwb29scyksXG4gICAgfSlcbiAgICAucHJvbWlzZSgpO1xuXG4gIGxvZy5pbmZvKHsgcmVzdWx0IH0sIGBEb25lICR7cHJvdG9jb2x9YCk7XG5cbiAgbG9nLmluZm8oYFN1Y2Nlc3NmdWxseSBjYWNoZWQgJHtwcm90b2NvbH0gcG9vbHMgdG8gUzNgKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0geyBoYW5kbGVyIH07XG4iXX0=