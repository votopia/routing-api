import { S3 } from "aws-sdk";
import axios from "axios";
import { default as bunyan } from "bunyan";
const TOKEN_LISTS = [
    "https://raw.githubusercontent.com/The-Blockchain-Association/sec-notice-list/master/ba-sec-list.json",
    "https://tokens.coingecko.com/uniswap/all.json",
    "https://gateway.ipfs.io/ipns/tokens.uniswap.org",
];
const handler = async (event) => {
    const log = bunyan.createLogger({
        name: "TokenListLambda",
        serializers: bunyan.stdSerializers,
        level: "info",
        requestId: event.id,
    });
    const s3 = new S3();
    for (const tokenListURI of TOKEN_LISTS) {
        log.info(`Getting tokenList from ${tokenListURI}.`);
        try {
            const { data: tokenList } = await axios.get(tokenListURI);
            log.info(`Got tokenList from ${tokenListURI}.`);
            await s3
                .putObject({
                Bucket: process.env.TOKEN_LIST_CACHE_BUCKET,
                Key: encodeURIComponent(tokenListURI),
                Body: JSON.stringify(tokenList),
            })
                .promise();
        }
        catch (err) {
            log.error({ err }, `Could not get tokenlist ${tokenListURI}`);
        }
    }
};
module.exports = { handler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtdG9rZW4tbGlzdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY3Jvbi9jYWNoZS10b2tlbi1saXN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQzdCLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBcUIsTUFBTSxRQUFRLENBQUM7QUFFOUQsTUFBTSxXQUFXLEdBQUc7SUFDbEIsc0dBQXNHO0lBQ3RHLCtDQUErQztJQUMvQyxpREFBaUQ7Q0FDbEQsQ0FBQztBQUVGLE1BQU0sT0FBTyxHQUFxQixLQUFLLEVBQUUsS0FBcUMsRUFBRSxFQUFFO0lBQ2hGLE1BQU0sR0FBRyxHQUFXLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFDdEMsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixXQUFXLEVBQUUsTUFBTSxDQUFDLGNBQWM7UUFDbEMsS0FBSyxFQUFFLE1BQU07UUFDYixTQUFTLEVBQUUsS0FBSyxDQUFDLEVBQUU7S0FDcEIsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxFQUFFLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQztJQUVwQixLQUFLLE1BQU0sWUFBWSxJQUFJLFdBQVcsRUFBRTtRQUN0QyxHQUFHLENBQUMsSUFBSSxDQUFDLDBCQUEwQixZQUFZLEdBQUcsQ0FBQyxDQUFDO1FBQ3BELElBQUk7WUFDRixNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMxRCxHQUFHLENBQUMsSUFBSSxDQUFDLHNCQUFzQixZQUFZLEdBQUcsQ0FBQyxDQUFDO1lBRWhELE1BQU0sRUFBRTtpQkFDTCxTQUFTLENBQUM7Z0JBQ1QsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXdCO2dCQUM1QyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsWUFBWSxDQUFDO2dCQUNyQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7YUFDaEMsQ0FBQztpQkFDRCxPQUFPLEVBQUUsQ0FBQztTQUNkO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsMkJBQTJCLFlBQVksRUFBRSxDQUFDLENBQUM7U0FDL0Q7S0FDRjtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsRUFBRSxPQUFPLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50QnJpZGdlRXZlbnQsIFNjaGVkdWxlZEhhbmRsZXIgfSBmcm9tIFwiYXdzLWxhbWJkYVwiO1xuaW1wb3J0IHsgUzMgfSBmcm9tIFwiYXdzLXNka1wiO1xuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBidW55YW4sIGRlZmF1bHQgYXMgTG9nZ2VyIH0gZnJvbSBcImJ1bnlhblwiO1xuXG5jb25zdCBUT0tFTl9MSVNUUyA9IFtcbiAgXCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vVGhlLUJsb2NrY2hhaW4tQXNzb2NpYXRpb24vc2VjLW5vdGljZS1saXN0L21hc3Rlci9iYS1zZWMtbGlzdC5qc29uXCIsXG4gIFwiaHR0cHM6Ly90b2tlbnMuY29pbmdlY2tvLmNvbS91bmlzd2FwL2FsbC5qc29uXCIsXG4gIFwiaHR0cHM6Ly9nYXRld2F5LmlwZnMuaW8vaXBucy90b2tlbnMudW5pc3dhcC5vcmdcIixcbl07XG5cbmNvbnN0IGhhbmRsZXI6IFNjaGVkdWxlZEhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEV2ZW50QnJpZGdlRXZlbnQ8c3RyaW5nLCB2b2lkPikgPT4ge1xuICBjb25zdCBsb2c6IExvZ2dlciA9IGJ1bnlhbi5jcmVhdGVMb2dnZXIoe1xuICAgIG5hbWU6IFwiVG9rZW5MaXN0TGFtYmRhXCIsXG4gICAgc2VyaWFsaXplcnM6IGJ1bnlhbi5zdGRTZXJpYWxpemVycyxcbiAgICBsZXZlbDogXCJpbmZvXCIsXG4gICAgcmVxdWVzdElkOiBldmVudC5pZCxcbiAgfSk7XG4gIGNvbnN0IHMzID0gbmV3IFMzKCk7XG5cbiAgZm9yIChjb25zdCB0b2tlbkxpc3RVUkkgb2YgVE9LRU5fTElTVFMpIHtcbiAgICBsb2cuaW5mbyhgR2V0dGluZyB0b2tlbkxpc3QgZnJvbSAke3Rva2VuTGlzdFVSSX0uYCk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YTogdG9rZW5MaXN0IH0gPSBhd2FpdCBheGlvcy5nZXQodG9rZW5MaXN0VVJJKTtcbiAgICAgIGxvZy5pbmZvKGBHb3QgdG9rZW5MaXN0IGZyb20gJHt0b2tlbkxpc3RVUkl9LmApO1xuXG4gICAgICBhd2FpdCBzM1xuICAgICAgICAucHV0T2JqZWN0KHtcbiAgICAgICAgICBCdWNrZXQ6IHByb2Nlc3MuZW52LlRPS0VOX0xJU1RfQ0FDSEVfQlVDS0VUISxcbiAgICAgICAgICBLZXk6IGVuY29kZVVSSUNvbXBvbmVudCh0b2tlbkxpc3RVUkkpLFxuICAgICAgICAgIEJvZHk6IEpTT04uc3RyaW5naWZ5KHRva2VuTGlzdCksXG4gICAgICAgIH0pXG4gICAgICAgIC5wcm9taXNlKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2cuZXJyb3IoeyBlcnIgfSwgYENvdWxkIG5vdCBnZXQgdG9rZW5saXN0ICR7dG9rZW5MaXN0VVJJfWApO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7IGhhbmRsZXIgfTtcbiJdfQ==